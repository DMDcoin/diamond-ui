/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type CoinsRewarded = ContractEventLog<{
  rewards: string;
  0: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface BlockRewardHbbftMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BlockRewardHbbftMock;
  clone(): BlockRewardHbbftMock;
  methods: {
    REWARD_PERCENT_MULTIPLIER(): NonPayableTransactionObject<string>;

    VALIDATOR_MIN_REWARD_PERCENT(): NonPayableTransactionObject<string>;

    addToDeltaPot(): PayableTransactionObject<void>;

    addToReinsertPot(): PayableTransactionObject<void>;

    connectivityTracker(): NonPayableTransactionObject<string>;

    delegatorShare(
      _stakingEpoch: number | string | BN,
      _delegatorStaked: number | string | BN,
      _validatorStaked: number | string | BN,
      _totalStaked: number | string | BN,
      _poolReward: number | string | BN
    ): NonPayableTransactionObject<string>;

    deltaPot(): NonPayableTransactionObject<string>;

    deltaPotPayoutFraction(): NonPayableTransactionObject<string>;

    earlyEpochEnd(): NonPayableTransactionObject<boolean>;

    epochPercentage(): NonPayableTransactionObject<string>;

    epochPoolNativeReward(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<string>;

    epochsPoolGotRewardFor(
      _miningAddress: string
    ): NonPayableTransactionObject<string[]>;

    epochsToClaimRewardFrom(
      _poolStakingAddress: string,
      _staker: string
    ): NonPayableTransactionObject<string[]>;

    getDelegatorReward(
      _delegatorStake: number | string | BN,
      _stakingEpoch: number | string | BN,
      _poolMiningAddress: string
    ): NonPayableTransactionObject<string>;

    getGovernanceAddress(): NonPayableTransactionObject<string>;

    getValidatorReward(
      _stakingEpoch: number | string | BN,
      _poolMiningAddress: string
    ): NonPayableTransactionObject<string>;

    governancePotAddress(): NonPayableTransactionObject<string>;

    governancePotShareDenominator(): NonPayableTransactionObject<string>;

    governancePotShareNominator(): NonPayableTransactionObject<string>;

    initialize(
      _contractOwner: string,
      _validatorSet: string,
      _connectivityTracker: string
    ): NonPayableTransactionObject<void>;

    nativeRewardUndistributed(): NonPayableTransactionObject<string>;

    notifyEarlyEpochEnd(): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    reinsertPot(): NonPayableTransactionObject<string>;

    reinsertPotPayoutFraction(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    reward(_isEpochEndBlock: boolean): NonPayableTransactionObject<string>;

    sendCoins(): PayableTransactionObject<void>;

    setConnectivityTracker(
      _connectivityTracker: string
    ): NonPayableTransactionObject<void>;

    setEpochPoolReward(
      _stakingEpoch: number | string | BN,
      _poolMiningAddress: string
    ): PayableTransactionObject<void>;

    setGovernanceAddress(_address: string): NonPayableTransactionObject<void>;

    setReinsertPotPayoutFraction(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    setSnapshotPoolValidatorStakeAmount(
      _stakingEpoch: number | string | BN,
      _poolMiningAddress: string,
      _amount: number | string | BN
    ): NonPayableTransactionObject<void>;

    setSystemAddress(_address: string): NonPayableTransactionObject<void>;

    setValidatorMinRewardPercent(
      _stakingEpoch: number | string | BN,
      _percent: number | string | BN
    ): NonPayableTransactionObject<void>;

    setdeltaPotPayoutFraction(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    snapshotPoolStakeAmounts(
      _stakingContract: string,
      _stakingEpoch: number | string | BN,
      _miningAddress: string
    ): NonPayableTransactionObject<void>;

    snapshotPoolTotalStakeAmount(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<string>;

    snapshotPoolValidatorStakeAmount(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    transferReward(
      _nativeCoins: number | string | BN,
      _to: string
    ): NonPayableTransactionObject<void>;

    validatorMinRewardPercent(
      arg0: number | string | BN
    ): NonPayableTransactionObject<string>;

    validatorRewardPercent(
      _stakingAddress: string
    ): NonPayableTransactionObject<string>;

    validatorSetContract(): NonPayableTransactionObject<string>;

    validatorShare(
      _stakingEpoch: number | string | BN,
      _validatorStaked: number | string | BN,
      _totalStaked: number | string | BN,
      _poolReward: number | string | BN
    ): NonPayableTransactionObject<string>;
  };
  events: {
    CoinsRewarded(cb?: Callback<CoinsRewarded>): EventEmitter;
    CoinsRewarded(
      options?: EventOptions,
      cb?: Callback<CoinsRewarded>
    ): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "CoinsRewarded", cb: Callback<CoinsRewarded>): void;
  once(
    event: "CoinsRewarded",
    options: EventOptions,
    cb: Callback<CoinsRewarded>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
