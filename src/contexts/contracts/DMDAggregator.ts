/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;

export interface DMDAggregator extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DMDAggregator;
  clone(): DMDAggregator;
  methods: {
    getActiveProposals(): NonPayableTransactionObject<
      [
        [
          string,
          string,
          string,
          string[],
          string[],
          string[],
          string,
          string,
          string,
          string,
          string,
          string
        ],
        string[],
        [string, string, string, string],
        string,
        string
      ][]
    >;

    getAllPools(): NonPayableTransactionObject<
      [string[], string[], string[], string[], string[], string[], string[]]
    >;

    getDaoGlobals(): NonPayableTransactionObject<
      [string, [string, string, string, string], string, string]
    >;

    getDaoPhaseProposals(
      daoPhase: number | string | BN
    ): NonPayableTransactionObject<
      [
        [
          string,
          string,
          string,
          string[],
          string[],
          string[],
          string,
          string,
          string,
          string,
          string,
          string
        ],
        string[],
        [string, string, string, string],
        string,
        string
      ][]
    >;

    getDelegationsData(
      delegators: string[],
      poolAddress: string
    ): NonPayableTransactionObject<{
      _delegatesData: [string, string][];
      _ownStake: string;
      _candidateStake: string;
      0: [string, string][];
      1: string;
      2: string;
    }>;

    getGlobals(): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        boolean,
        string,
        string,
        string
      ]
    >;

    getHistoricProposals(): NonPayableTransactionObject<
      [
        [
          string,
          string,
          string,
          string[],
          string[],
          string[],
          string,
          string,
          string,
          string,
          string,
          string
        ],
        string[],
        [string, string, string, string],
        string,
        string
      ][]
    >;

    getNodeOperatorData(stakingAddress: string): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    getPoolsData(
      _sAs: string[]
    ): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string[],
        string,
        string,
        boolean,
        string,
        string
      ][]
    >;

    getProposalDetails(
      proposalId: number | string | BN
    ): NonPayableTransactionObject<
      [
        [
          string,
          string,
          string,
          string[],
          string[],
          string[],
          string,
          string,
          string,
          string,
          string,
          string
        ],
        string[],
        [string, string, string, string],
        string,
        string
      ]
    >;

    getProposalsDetails(
      proposalIds: (number | string | BN)[]
    ): NonPayableTransactionObject<
      [
        [
          string,
          string,
          string,
          string[],
          string[],
          string[],
          string,
          string,
          string,
          string,
          string,
          string
        ],
        string[],
        [string, string, string, string],
        string,
        string
      ][]
    >;

    getStakingAddresses(
      miningAddresses: string[]
    ): NonPayableTransactionObject<string[]>;

    getUserOrderedWithdraws(
      _user: string,
      _pools: string[]
    ): NonPayableTransactionObject<[string, string, string][]>;

    getUserStakes(
      _user: string,
      _pools: string[]
    ): NonPayableTransactionObject<[string, string, string][]>;

    getWithdrawableAmounts(
      poolStAddress: string,
      user: string
    ): NonPayableTransactionObject<{
      0: string;
      1: string;
    }>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setBlockRewardContract(_br: string): NonPayableTransactionObject<void>;

    setKeygenHistoryContract(_kh: string): NonPayableTransactionObject<void>;

    setStakingContract(_st: string): NonPayableTransactionObject<void>;

    setTxPermissionContract(_tp: string): NonPayableTransactionObject<void>;

    setValidatorsSetContract(_vs: string): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;
}
