/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type LowMajorityProposalExecuted = ContractEventLog<{
  proposalId: string;
  0: string;
}>;

export interface DiamondDaoLowMajority extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DiamondDaoLowMajority;
  clone(): DiamondDaoLowMajority;
  methods: {
    execute(
      proposalId: number | string | BN,
      targets: string[],
      values: (number | string | BN)[],
      calldatas: (string | number[])[]
    ): NonPayableTransactionObject<void>;

    initialize(_mainDao: string): NonPayableTransactionObject<void>;

    lowMajorityPot(): NonPayableTransactionObject<string>;

    mainDao(): NonPayableTransactionObject<string>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: (number | string | BN)[],
      arg3: (number | string | BN)[],
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: number | string | BN,
      arg4: string | number[]
    ): NonPayableTransactionObject<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: number | string | BN,
      arg3: string | number[]
    ): NonPayableTransactionObject<string>;

    quorumReached(
      result: [
        number | string | BN,
        number | string | BN,
        number | string | BN,
        number | string | BN
      ],
      totalStakedAmount: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    LowMajorityProposalExecuted(
      cb?: Callback<LowMajorityProposalExecuted>
    ): EventEmitter;
    LowMajorityProposalExecuted(
      options?: EventOptions,
      cb?: Callback<LowMajorityProposalExecuted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(
    event: "LowMajorityProposalExecuted",
    cb: Callback<LowMajorityProposalExecuted>
  ): void;
  once(
    event: "LowMajorityProposalExecuted",
    options: EventOptions,
    cb: Callback<LowMajorityProposalExecuted>
  ): void;
}
