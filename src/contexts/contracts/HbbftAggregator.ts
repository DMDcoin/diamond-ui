/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface HbbftAggregator extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): HbbftAggregator;
  clone(): HbbftAggregator;
  methods: {
    br(): NonPayableTransactionObject<string>;

    getAllPools(): NonPayableTransactionObject<
      [string[], string[], string[], string[], string[]]
    >;

    getDelegationsData(
      delegators: string[],
      poolAddress: string
    ): NonPayableTransactionObject<{
      _delegatesData: [string, string][];
      _ownStake: string;
      _candidateStake: string;
      0: [string, string][];
      1: string;
      2: string;
    }>;

    getGlobals(): NonPayableTransactionObject<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        boolean,
        string,
        string,
        string
      ]
    >;

    getPoolsData(
      _sAs: string[]
    ): NonPayableTransactionObject<
      [string, string, string, string, string, string[], string, string][]
    >;

    getUserOrderedWithdraws(
      _user: string,
      _pools: string[]
    ): NonPayableTransactionObject<[string, string, string][]>;

    getUserStakes(
      _user: string,
      _pools: string[]
    ): NonPayableTransactionObject<[string, string, string][]>;

    kh(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    setBlockRewardContract(_br: string): NonPayableTransactionObject<void>;

    setKeygenHistoryContract(_kh: string): NonPayableTransactionObject<void>;

    setStakingContract(_st: string): NonPayableTransactionObject<void>;

    setTxPermissionContract(_tp: string): NonPayableTransactionObject<void>;

    setValidatorsSetContract(_vs: string): NonPayableTransactionObject<void>;

    st(): NonPayableTransactionObject<string>;

    tp(): NonPayableTransactionObject<string>;

    vs(): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
