/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface IStakingHbbft extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): IStakingHbbft;
  clone(): IStakingHbbft;
  methods: {
    MAX_CANDIDATES(): NonPayableTransactionObject<string>;

    getPoolPublicKey(_poolAddress: string): NonPayableTransactionObject<string>;

    getPoolValidatorStakeAmount(
      _epoch: number | string | BN,
      _stakingPool: string
    ): NonPayableTransactionObject<string>;

    getPoolsInactive(): NonPayableTransactionObject<string[]>;

    getPoolsLikelihood(): NonPayableTransactionObject<{
      0: string[];
      1: string;
    }>;

    getPoolsToBeElected(): NonPayableTransactionObject<string[]>;

    getPoolsToBeRemoved(): NonPayableTransactionObject<string[]>;

    incrementStakingEpoch(): NonPayableTransactionObject<void>;

    isPoolActive(arg0: string): NonPayableTransactionObject<boolean>;

    notifyAvailability(
      _stakingAddress: string
    ): NonPayableTransactionObject<void>;

    notifyKeyGenFailed(): NonPayableTransactionObject<void>;

    notifyNetworkOfftimeDetected(
      arg0: number | string | BN
    ): NonPayableTransactionObject<void>;

    orderedWithdrawAmount(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    poolDelegators(arg0: string): NonPayableTransactionObject<string[]>;

    removePool(arg0: string): NonPayableTransactionObject<void>;

    removePools(): NonPayableTransactionObject<void>;

    restake(
      _poolStakingAddress: string,
      validatorReward: number | string | BN
    ): PayableTransactionObject<void>;

    setStakingEpochStartTime(
      arg0: number | string | BN
    ): NonPayableTransactionObject<void>;

    setValidatorInternetAddress(
      arg0: string,
      arg1: string | number[],
      arg2: string | number[]
    ): NonPayableTransactionObject<void>;

    snapshotPoolStakeAmounts(
      _epoch: number | string | BN,
      _stakingPool: string
    ): NonPayableTransactionObject<void>;

    stakeAmount(
      arg0: string,
      arg1: string
    ): NonPayableTransactionObject<string>;

    stakeAmountTotal(arg0: string): NonPayableTransactionObject<string>;

    stakingEpoch(): NonPayableTransactionObject<string>;

    stakingEpochStartBlock(): NonPayableTransactionObject<string>;

    stakingEpochStartTime(): NonPayableTransactionObject<string>;

    stakingFixedEpochDuration(): NonPayableTransactionObject<string>;

    stakingFixedEpochEndTime(): NonPayableTransactionObject<string>;

    stakingWithdrawDisallowPeriod(): NonPayableTransactionObject<string>;

    startTimeOfNextPhaseTransition(): NonPayableTransactionObject<string>;

    totalStakedAmount(): NonPayableTransactionObject<string>;

    updatePoolLikelihood(
      mining: string,
      validatorScore: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
