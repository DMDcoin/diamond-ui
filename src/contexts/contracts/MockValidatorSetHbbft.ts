/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface MockValidatorSetHbbft extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MockValidatorSetHbbft;
  clone(): MockValidatorSetHbbft;
  methods: {
    add(
      staking: string,
      mining: string,
      available: boolean
    ): NonPayableTransactionObject<void>;

    isValidator(mining: string): NonPayableTransactionObject<boolean>;

    isValidatorOrPending(
      _miningAddress: string
    ): NonPayableTransactionObject<boolean>;

    miningByStakingAddress(
      staking: string
    ): NonPayableTransactionObject<string>;

    remove(staking: string): NonPayableTransactionObject<void>;

    toggleAvailability(
      staking: string,
      available: boolean
    ): NonPayableTransactionObject<void>;

    validatorAvailableSince(
      mining: string
    ): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
