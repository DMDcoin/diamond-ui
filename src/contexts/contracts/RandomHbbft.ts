/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type SetCurrentSeed = ContractEventLog<{
  blockNum: string;
  seed: string;
  healthy: boolean;
  0: string;
  1: string;
  2: boolean;
}>;

export interface RandomHbbft extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RandomHbbft;
  clone(): RandomHbbft;
  methods: {
    currentSeed(): NonPayableTransactionObject<string>;

    getSeedHistoric(
      _blocknumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getSeedsHistoric(
      _blocknumbers: (number | string | BN)[]
    ): NonPayableTransactionObject<string[]>;

    initialize(
      _contractOwner: string,
      _validatorSet: string
    ): NonPayableTransactionObject<void>;

    isFullHealth(): NonPayableTransactionObject<boolean>;

    isFullHealthHistoric(
      _blocknumber: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    isFullHealthsHistoric(
      _blocknumbers: (number | string | BN)[]
    ): NonPayableTransactionObject<boolean[]>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setCurrentSeed(
      _currentSeed: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    validatorSetContract(): NonPayableTransactionObject<string>;
  };
  events: {
    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    SetCurrentSeed(cb?: Callback<SetCurrentSeed>): EventEmitter;
    SetCurrentSeed(
      options?: EventOptions,
      cb?: Callback<SetCurrentSeed>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "SetCurrentSeed", cb: Callback<SetCurrentSeed>): void;
  once(
    event: "SetCurrentSeed",
    options: EventOptions,
    cb: Callback<SetCurrentSeed>
  ): void;
}
