/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type BlockGasLimitChanged = ContractEventLog<{
  _value: string;
  0: string;
}>;
export type GasPriceChanged = ContractEventLog<{
  _value: string;
  0: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RemoveChangeableParameter = ContractEventLog<{
  funcSelector: string;
  0: string;
}>;
export type SetBlockGasLimit = ContractEventLog<{
  _blockGasLimit: string;
  0: string;
}>;
export type SetChangeableParameter = ContractEventLog<{
  setter: string;
  getter: string;
  params: string[];
  0: string;
  1: string;
  2: string[];
}>;
export type SetConnectivityTracker = ContractEventLog<{
  _value: string;
  0: string;
}>;
export type SetMinimumGasPrice = ContractEventLog<{
  _minGasPrice: string;
  0: string;
}>;

export interface TxPermissionHbbft extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TxPermissionHbbft;
  clone(): TxPermissionHbbft;
  methods: {
    ANNOUNCE_AVAILABILITY_SIGNATURE(): NonPayableTransactionObject<string>;

    REPORT_MISSING_CONNECTIVITY_SELECTOR(): NonPayableTransactionObject<string>;

    REPORT_RECONNECT_SELECTOR(): NonPayableTransactionObject<string>;

    SET_VALIDATOR_IP(): NonPayableTransactionObject<string>;

    WRITE_ACKS_SIGNATURE(): NonPayableTransactionObject<string>;

    WRITE_PART_SIGNATURE(): NonPayableTransactionObject<string>;

    addAllowedSender(_sender: string): NonPayableTransactionObject<void>;

    allowedParameterRange(
      arg0: string | number[]
    ): NonPayableTransactionObject<string>;

    allowedSenders(): NonPayableTransactionObject<string[]>;

    allowedTxTypes(
      _sender: string,
      _to: string,
      arg2: number | string | BN,
      _gasPrice: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<{
      typesMask: string;
      cache: boolean;
      0: string;
      1: boolean;
    }>;

    blockGasLimit(): NonPayableTransactionObject<string>;

    certifierContract(): NonPayableTransactionObject<string>;

    connectivityTracker(): NonPayableTransactionObject<string>;

    contractName(): NonPayableTransactionObject<string>;

    contractNameHash(): NonPayableTransactionObject<string>;

    contractVersion(): NonPayableTransactionObject<string>;

    getAllowedParamsRange(
      _selector: string
    ): NonPayableTransactionObject<[string, string[]]>;

    getAllowedParamsRangeWithSelector(
      _selector: string | number[]
    ): NonPayableTransactionObject<[string, string[]]>;

    initialize(
      _allowed: string[],
      _certifier: string,
      _validatorSet: string,
      _keyGenHistoryContract: string,
      _connectivityTracker: string,
      _contractOwner: string
    ): NonPayableTransactionObject<void>;

    isSenderAllowed(arg0: string): NonPayableTransactionObject<boolean>;

    isWithinAllowedRange(
      funcSelector: string | number[],
      newVal: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    keyGenHistoryContract(): NonPayableTransactionObject<string>;

    minimumGasPrice(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    removeAllowedChangeableParameter(
      funcSelector: string | number[]
    ): NonPayableTransactionObject<void>;

    removeAllowedSender(_sender: string): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setAllowedChangeableParameter(
      setter: string | number[],
      getter: string | number[],
      params: (number | string | BN)[]
    ): NonPayableTransactionObject<void>;

    setBlockGasLimit(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    setConnectivityTracker(
      _connectivityTracker: string
    ): NonPayableTransactionObject<void>;

    setMinimumGasPrice(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    validatorSetContract(): NonPayableTransactionObject<string>;
  };
  events: {
    BlockGasLimitChanged(cb?: Callback<BlockGasLimitChanged>): EventEmitter;
    BlockGasLimitChanged(
      options?: EventOptions,
      cb?: Callback<BlockGasLimitChanged>
    ): EventEmitter;

    GasPriceChanged(cb?: Callback<GasPriceChanged>): EventEmitter;
    GasPriceChanged(
      options?: EventOptions,
      cb?: Callback<GasPriceChanged>
    ): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RemoveChangeableParameter(
      cb?: Callback<RemoveChangeableParameter>
    ): EventEmitter;
    RemoveChangeableParameter(
      options?: EventOptions,
      cb?: Callback<RemoveChangeableParameter>
    ): EventEmitter;

    SetBlockGasLimit(cb?: Callback<SetBlockGasLimit>): EventEmitter;
    SetBlockGasLimit(
      options?: EventOptions,
      cb?: Callback<SetBlockGasLimit>
    ): EventEmitter;

    SetChangeableParameter(cb?: Callback<SetChangeableParameter>): EventEmitter;
    SetChangeableParameter(
      options?: EventOptions,
      cb?: Callback<SetChangeableParameter>
    ): EventEmitter;

    SetConnectivityTracker(cb?: Callback<SetConnectivityTracker>): EventEmitter;
    SetConnectivityTracker(
      options?: EventOptions,
      cb?: Callback<SetConnectivityTracker>
    ): EventEmitter;

    SetMinimumGasPrice(cb?: Callback<SetMinimumGasPrice>): EventEmitter;
    SetMinimumGasPrice(
      options?: EventOptions,
      cb?: Callback<SetMinimumGasPrice>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "BlockGasLimitChanged", cb: Callback<BlockGasLimitChanged>): void;
  once(
    event: "BlockGasLimitChanged",
    options: EventOptions,
    cb: Callback<BlockGasLimitChanged>
  ): void;

  once(event: "GasPriceChanged", cb: Callback<GasPriceChanged>): void;
  once(
    event: "GasPriceChanged",
    options: EventOptions,
    cb: Callback<GasPriceChanged>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(
    event: "RemoveChangeableParameter",
    cb: Callback<RemoveChangeableParameter>
  ): void;
  once(
    event: "RemoveChangeableParameter",
    options: EventOptions,
    cb: Callback<RemoveChangeableParameter>
  ): void;

  once(event: "SetBlockGasLimit", cb: Callback<SetBlockGasLimit>): void;
  once(
    event: "SetBlockGasLimit",
    options: EventOptions,
    cb: Callback<SetBlockGasLimit>
  ): void;

  once(
    event: "SetChangeableParameter",
    cb: Callback<SetChangeableParameter>
  ): void;
  once(
    event: "SetChangeableParameter",
    options: EventOptions,
    cb: Callback<SetChangeableParameter>
  ): void;

  once(
    event: "SetConnectivityTracker",
    cb: Callback<SetConnectivityTracker>
  ): void;
  once(
    event: "SetConnectivityTracker",
    options: EventOptions,
    cb: Callback<SetConnectivityTracker>
  ): void;

  once(event: "SetMinimumGasPrice", cb: Callback<SetMinimumGasPrice>): void;
  once(
    event: "SetMinimumGasPrice",
    options: EventOptions,
    cb: Callback<SetMinimumGasPrice>
  ): void;
}
