/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type ValidatorAvailable = ContractEventLog<{
  validator: string;
  timestamp: string;
  0: string;
  1: string;
}>;
export type ValidatorUnavailable = ContractEventLog<{
  validator: string;
  timestamp: string;
  0: string;
  1: string;
}>;

export interface ValidatorSetHbbftMock extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ValidatorSetHbbftMock;
  clone(): ValidatorSetHbbftMock;
  methods: {
    addPendingValidator(_mining: string): NonPayableTransactionObject<void>;

    announceAvailability(
      _blockNumber: number | string | BN,
      _blockhash: string | number[]
    ): NonPayableTransactionObject<void>;

    blockRewardContract(): NonPayableTransactionObject<string>;

    bonusScoreSystem(): NonPayableTransactionObject<string>;

    canCallAnnounceAvailability(
      _miningAddress: string
    ): NonPayableTransactionObject<boolean>;

    connectivityTracker(): NonPayableTransactionObject<string>;

    finalizeChange(): NonPayableTransactionObject<void>;

    forceFinalizeNewValidators(): NonPayableTransactionObject<void>;

    getCurrentValidatorsCount(): NonPayableTransactionObject<string>;

    getPendingValidatorKeyGenerationMode(
      _miningAddress: string
    ): NonPayableTransactionObject<string>;

    getPendingValidators(): NonPayableTransactionObject<string[]>;

    getPreviousValidators(): NonPayableTransactionObject<string[]>;

    getPublicKey(_miningAddress: string): NonPayableTransactionObject<string>;

    getRandomIndex(
      _likelihood: (number | string | BN)[],
      _likelihoodSum: number | string | BN,
      _randomNumber: number | string | BN
    ): NonPayableTransactionObject<string>;

    getStakingContract(): NonPayableTransactionObject<string>;

    getValidatorCountSweetSpot(
      _possibleValidatorCount: number | string | BN
    ): NonPayableTransactionObject<string>;

    getValidators(): NonPayableTransactionObject<string[]>;

    handleFailedKeyGeneration(): NonPayableTransactionObject<void>;

    initialize(
      _contractOwner: string,
      _params: [
        string,
        string,
        string,
        string,
        string,
        string,
        number | string | BN
      ],
      _initialMiningAddresses: string[],
      _initialStakingAddresses: string[]
    ): NonPayableTransactionObject<void>;

    isFullHealth(): NonPayableTransactionObject<boolean>;

    isPendingValidator(
      _miningAddress: string
    ): NonPayableTransactionObject<boolean>;

    isValidator(arg0: string): NonPayableTransactionObject<boolean>;

    isValidatorAbandoned(
      _stakingAddress: string
    ): NonPayableTransactionObject<boolean>;

    isValidatorOrPending(
      _miningAddress: string
    ): NonPayableTransactionObject<boolean>;

    isValidatorPrevious(arg0: string): NonPayableTransactionObject<boolean>;

    keyGenHistoryContract(): NonPayableTransactionObject<string>;

    kickValidator(_mining: string): NonPayableTransactionObject<void>;

    maxValidators(): NonPayableTransactionObject<string>;

    miningByStakingAddress(arg0: string): NonPayableTransactionObject<string>;

    newValidatorSet(): NonPayableTransactionObject<void>;

    notifyUnavailability(
      _miningAddress: string
    ): NonPayableTransactionObject<void>;

    owner(): NonPayableTransactionObject<string>;

    publicKeyByStakingAddress(
      _stakingAddress: string
    ): NonPayableTransactionObject<string>;

    randomContract(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setBlockRewardContract(_address: string): NonPayableTransactionObject<void>;

    setBonusScoreSystemAddress(
      _address: string
    ): NonPayableTransactionObject<void>;

    setConnectivityTracker(_address: string): NonPayableTransactionObject<void>;

    setKeyGenHistoryContract(
      _address: string
    ): NonPayableTransactionObject<void>;

    setRandomContract(_address: string): NonPayableTransactionObject<void>;

    setStakingAddress(
      _miningAddress: string,
      _stakingAddress: string
    ): NonPayableTransactionObject<void>;

    setStakingContract(_address: string): NonPayableTransactionObject<void>;

    setValidatorAvailableSince(
      _validator: string,
      _timestamp: number | string | BN
    ): NonPayableTransactionObject<void>;

    setValidatorInternetAddress(
      _ip: string | number[],
      _port: string | number[]
    ): NonPayableTransactionObject<void>;

    setValidatorsNum(
      num: number | string | BN
    ): NonPayableTransactionObject<void>;

    stakingByMiningAddress(arg0: string): NonPayableTransactionObject<string>;

    stakingContract(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    validatorAvailableSince(arg0: string): NonPayableTransactionObject<string>;

    validatorAvailableSinceLastWrite(
      arg0: string
    ): NonPayableTransactionObject<string>;

    validatorCounter(arg0: string): NonPayableTransactionObject<string>;

    validatorInactivityThreshold(): NonPayableTransactionObject<string>;
  };
  events: {
    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    ValidatorAvailable(cb?: Callback<ValidatorAvailable>): EventEmitter;
    ValidatorAvailable(
      options?: EventOptions,
      cb?: Callback<ValidatorAvailable>
    ): EventEmitter;

    ValidatorUnavailable(cb?: Callback<ValidatorUnavailable>): EventEmitter;
    ValidatorUnavailable(
      options?: EventOptions,
      cb?: Callback<ValidatorUnavailable>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "ValidatorAvailable", cb: Callback<ValidatorAvailable>): void;
  once(
    event: "ValidatorAvailable",
    options: EventOptions,
    cb: Callback<ValidatorAvailable>
  ): void;

  once(event: "ValidatorUnavailable", cb: Callback<ValidatorUnavailable>): void;
  once(
    event: "ValidatorUnavailable",
    options: EventOptions,
    cb: Callback<ValidatorUnavailable>
  ): void;
}
