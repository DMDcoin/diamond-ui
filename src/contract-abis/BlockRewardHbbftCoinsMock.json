{
  "contractName": "BlockRewardHbbftCoinsMock",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        }
      ],
      "name": "CoinsRewarded",
      "type": "event"
    },
    {
      "payable": true,
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "REWARD_PERCENT_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "VALIDATOR_MIN_REWARD_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "addToDeltaPot",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "addToReinsertPot",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_delegatorStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolReward",
          "type": "uint256"
        }
      ],
      "name": "delegatorShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "deltaPot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "deltaPotPayoutFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "epochPoolNativeReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_miningAddress",
          "type": "address"
        }
      ],
      "name": "epochsPoolGotRewardFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolStakingAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        }
      ],
      "name": "epochsToClaimRewardFrom",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "epochsToClaimFrom",
          "type": "uint256[]"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_delegatorStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakingEpoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poolMiningAddress",
          "type": "address"
        }
      ],
      "name": "getDelegatorReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeReward",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingEpoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poolMiningAddress",
          "type": "address"
        }
      ],
      "name": "getValidatorReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nativeReward",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "governancePotAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "governancePotShareDenominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "governancePotShareNominator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_validatorSet",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "nativeRewardUndistributed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "reinsertPot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "reinsertPotPayoutFraction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isEpochEndBlock",
          "type": "bool"
        }
      ],
      "name": "reward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardsNative",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "sendCoins",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setReinsertPotPayoutFraction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingEpoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poolMiningAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "setSnapshotPoolValidatorStakeAmount",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setSystemAddress",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "setValidatorMinRewardPercent",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "setdeltaPotPayoutFraction",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract IStakingHbbft",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stakingEpoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_miningAddress",
          "type": "address"
        }
      ],
      "name": "snapshotPoolStakeAmounts",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "snapshotPoolTotalStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "snapshotPoolValidatorStakeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nativeCoins",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferReward",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validatorMinRewardPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "address",
          "name": "_stakingAddress",
          "type": "address"
        }
      ],
      "name": "validatorRewardPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "validatorSetContract",
      "outputs": [
        {
          "internalType": "contract IValidatorSetHbbft",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_validatorStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_poolReward",
          "type": "uint256"
        }
      ],
      "name": "validatorShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakingEpoch",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_poolMiningAddress",
          "type": "address"
        }
      ],
      "name": "setEpochPoolReward",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"CoinsRewarded\",\"type\":\"event\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"constant\":true,\"inputs\":[],\"name\":\"REWARD_PERCENT_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VALIDATOR_MIN_REWARD_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addToDeltaPot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"addToReinsertPot\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_delegatorStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolReward\",\"type\":\"uint256\"}],\"name\":\"delegatorShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deltaPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"deltaPotPayoutFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"epochPoolNativeReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_miningAddress\",\"type\":\"address\"}],\"name\":\"epochsPoolGotRewardFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolStakingAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"epochsToClaimRewardFrom\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"epochsToClaimFrom\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delegatorStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakingEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolMiningAddress\",\"type\":\"address\"}],\"name\":\"getDelegatorReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolMiningAddress\",\"type\":\"address\"}],\"name\":\"getValidatorReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nativeReward\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governancePotAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governancePotShareDenominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"governancePotShareNominator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validatorSet\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"nativeRewardUndistributed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reinsertPot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reinsertPotPayoutFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isEpochEndBlock\",\"type\":\"bool\"}],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardsNative\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sendCoins\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolMiningAddress\",\"type\":\"address\"}],\"name\":\"setEpochPoolReward\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setReinsertPotPayoutFraction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_poolMiningAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setSnapshotPoolValidatorStakeAmount\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setSystemAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setValidatorMinRewardPercent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"setdeltaPotPayoutFraction\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IStakingHbbft\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stakingEpoch\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_miningAddress\",\"type\":\"address\"}],\"name\":\"snapshotPoolStakeAmounts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"snapshotPoolTotalStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"snapshotPoolValidatorStakeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nativeCoins\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferReward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validatorMinRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingAddress\",\"type\":\"address\"}],\"name\":\"validatorRewardPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"validatorSetContract\",\"outputs\":[{\"internalType\":\"contract IValidatorSetHbbft\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakingEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_validatorStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_poolReward\",\"type\":\"uint256\"}],\"name\":\"validatorShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addToDeltaPot()\":{\"details\":\"adds the transfered value to the delta pot. everyone is allowed to pile up the delta pot. however, circulating coins should be added to the reinsert pot, since the reinsert pot is designed for circulating coins.\"},\"addToReinsertPot()\":{\"details\":\"adds the transfered value to the reinsert pot. everyone is allowed to pile up the resinsert pot, the reinsert pot reinserts coins back into the payout cycle. this is used by smart contracts of the ecosystem, DAO decisions to fund the reinsert pot from the DAO Pool and manual by hand. There is no permission check,  everyone is welcomed to pile up the reinsert pot.\"},\"delegatorShare(uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Calculates delegator's share for the given pool reward amount and the specified staking epoch. Used by the `StakingHbbft.claimReward` function.\",\"params\":{\"_delegatorStaked\":\"The amount staked by a delegator.\",\"_poolReward\":\"The value of pool reward.\",\"_stakingEpoch\":\"The number of staking epoch.\",\"_totalStaked\":\"The total amount staked by a validator and their delegators.\",\"_validatorStaked\":\"The amount staked by a validator.\"}},\"epochsPoolGotRewardFor(address)\":{\"details\":\"Returns an array of epoch numbers for which the specified pool (mining address) got a non-zero reward.\"},\"epochsToClaimRewardFrom(address,address)\":{\"details\":\"Returns an array of epoch numbers for which the specified staker can claim a reward from the specified pool by the `StakingHbbft.claimReward` function.\",\"params\":{\"_poolStakingAddress\":\"The pool staking address.\",\"_staker\":\"The staker's address (delegator or candidate/validator).\"}},\"getDelegatorReward(uint256,uint256,address)\":{\"details\":\"Returns the reward amount in native coins for some delegator with the specified stake amount placed into the specified pool before the specified staking epoch. Used by the `StakingHbbft.claimReward` function.\",\"params\":{\"_delegatorStake\":\"The stake amount placed by some delegator into the `_poolMiningAddress` pool.\",\"_poolMiningAddress\":\"The pool mining address.\",\"_stakingEpoch\":\"The serial number of staking epoch.\"},\"return\":\"`uint256 nativeReward` - the reward amount in native coins.\"},\"getValidatorReward(uint256,address)\":{\"details\":\"Returns the reward amount in native coins for the specified validator and for the specified staking epoch. Used by the `StakingHbbft.claimReward` function.\",\"params\":{\"_poolMiningAddress\":\"The pool mining address.\",\"_stakingEpoch\":\"The serial number of staking epoch.\"},\"return\":\"`uint256 nativeReward` - the reward amount in native coins.\"},\"initialize(address)\":{\"details\":\"Initializes the contract at network startup. Can only be called by the constructor of the `InitializerHbbft` contract or owner.\",\"params\":{\"_validatorSet\":\"The address of the `ValidatorSetHbbft` contract.\"}},\"isInitialized()\":{\"details\":\"Returns a boolean flag indicating if the `initialize` function has been called.\"},\"reward(bool)\":{\"details\":\"Called by the engine when producing and closing a block, see https://wiki.parity.io/Block-Reward-Contract.html. This function performs all of the automatic operations needed for accumulating block producing statistics, starting a new staking epoch, snapshotting staking amounts for the upcoming staking epoch, and rewards distributing at the end of a staking epoch.\",\"params\":{\"_isEpochEndBlock\":\"Indicates if this is the last block of the current epoch i.e. just before the pending validators are finalized.\"}},\"setReinsertPotPayoutFraction(uint256)\":{\"details\":\"set the reinsert pot payout fraction. every epoch, a fraction of the reinsert pot is payed out. (same logic than in the reinsert pot.) Only theOwner, the DAO is allowed to set the reinsert pot payout fraction.\"},\"setdeltaPotPayoutFraction(uint256)\":{\"details\":\"set the delta pot payout fraction. every epoch, a fraction of the delta pot is payed out. Only theOwner, the DAO is allowed to set the delta pot payout fraction.\"},\"transferReward(uint256,address)\":{\"details\":\"Called by the `StakingHbbft.claimReward` function to transfer native coins from the balance of the `BlockRewardHbbft` contract to the specified address as a reward.\",\"params\":{\"_nativeCoins\":\"The amount of native coins to transfer as a reward.\",\"_to\":\"The target address to transfer the amounts to.\"}},\"validatorRewardPercent(address)\":{\"details\":\"Returns the reward coefficient for the specified validator. The given value should be divided by 10000 to get the value of the reward percent (since EVM doesn't support floating values). If the specified staking address is an address of a candidate that is not about to be a validator in the upcoming staking epoch the potentially possible reward coefficient is returned.\",\"params\":{\"_stakingAddress\":\"The staking address of the validator/candidate pool for which the getter must return the coefficient.\"}},\"validatorShare(uint256,uint256,uint256,uint256)\":{\"details\":\"Calculates validator's share for the given pool reward amount and the specified staking epoch. Used by the `validatorRewardPercent` and `StakingHbbft.claimReward` functions.\",\"params\":{\"_poolReward\":\"The value of pool reward.\",\"_stakingEpoch\":\"The number of staking epoch.\",\"_totalStaked\":\"The total amount staked by a validator and their delegators.\",\"_validatorStaked\":\"The amount staked by a validator.\"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/mockContracts/BlockRewardHbbftCoinsMock.sol\":\"BlockRewardHbbftCoinsMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/base/BlockRewardHbbftBase.sol\":{\"keccak256\":\"0x54f6c0a9d3c96968904112a9d9a8ed8f8830cb84268e871f082104700ebaa846\",\"urls\":[\"bzz-raw://5b1516b4a40da6aef06c41302c5af6f80cf8d507c862871614988f35fa090ea2\",\"dweb:/ipfs/QmT2QJD4czEspTgUThd71A8MP3gauDVgrDCx7Kg7QL36uB\"]},\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/base/BlockRewardHbbftCoins.sol\":{\"keccak256\":\"0x581d3399dbd094bb52da17f44462a1f9e6e01a945a794fd9da93b430eea48b04\",\"urls\":[\"bzz-raw://e848be178739708129a5993cd6965ac388b4e69b8602ac6f65a25fd3b39a6aa8\",\"dweb:/ipfs/QmeJsaFkoQyUi1wZSgaeZ2QDK6EhzsCA5LmPCxqM7YiFWE\"]},\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/interfaces/IBlockRewardHbbft.sol\":{\"keccak256\":\"0x3c1584cfd166741f927feab7398d08979ffee78995c2fdf58f04434dd0f1ee5d\",\"urls\":[\"bzz-raw://09ba56a1e5f90cda6d3f15060639432a718380fdddc6f997f46b2b1a9c1e29a6\",\"dweb:/ipfs/QmQfeLM6YjK9nUf2dWNrrsJsBiGPwhpqetjiN9yByYQH5w\"]},\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/interfaces/IBlockRewardHbbftCoins.sol\":{\"keccak256\":\"0xa5432c59fa5551aa4f9857c5442e1043129e20848c13838b121038a81ac8e937\",\"urls\":[\"bzz-raw://163faa33fdff2f5ec9238b3802c97f180bab4c7a6908de14a9ee77c9f185737a\",\"dweb:/ipfs/QmbD3ssmvNW5WehusFKTJqwZKbDF8zPpsiNqTxVLiSFW8H\"]},\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/interfaces/IRandomHbbft.sol\":{\"keccak256\":\"0xba5c1a7935bb398f241f4e9ab74c813ce020945ddbca2ae25c76588195d99428\",\"urls\":[\"bzz-raw://b1e5ed76dceb549cb41c0969c4ffae3213e452d53f8e457d68c9cafeb0abd20b\",\"dweb:/ipfs/QmdUtpfrrm93RXiUP6oGDVz172dvUkrCCCRJMLymRAU9Fp\"]},\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/interfaces/IStakingHbbft.sol\":{\"keccak256\":\"0xbb10a6ced6a2216e5a3c7217f839ee1e1e08ed13ce44ff89071e40e05677a705\",\"urls\":[\"bzz-raw://fda89933ea5e91225360cce72e411035365ab38a5ba58d211036d37ba690e388\",\"dweb:/ipfs/QmSvcHDsyjYK4xrYQsjd5xFN7VkDcLiT19gzFDHY5Letwq\"]},\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/interfaces/IValidatorSetHbbft.sol\":{\"keccak256\":\"0x850cc47e5d0675ea50aa509a23ca5aa8666d4f38a9f7cdef3a2f5109c83f7bcc\",\"urls\":[\"bzz-raw://a49880321a4510b9f96075bbf715e649b0a82c9f00b68185e96ab391f0246e7e\",\"dweb:/ipfs/QmYJQ1CKshBTfLKi3FVoiFfY4NUpnqRbMGgFn3tagiactG\"]},\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/libs/SafeMath.sol\":{\"keccak256\":\"0xa2e1cdf70b43e279d70e7b6c29df08e250a96d0987ded73bd04dc618ed28f6a3\",\"urls\":[\"bzz-raw://e803ce96bb1f1f2902430dabdb446fab5a3e74a047a24844c441d381d37a9e76\",\"dweb:/ipfs/Qmf68nqksAN4KDz5RZSQWi6rtzQvqYRh5ywNQ4BVZKhrG3\"]},\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/mockContracts/BlockRewardHbbftBaseMock.sol\":{\"keccak256\":\"0xf99f4ea766f0c5342d456f7ce138be482fcc75017083f2c19c198e79d92a3da0\",\"urls\":[\"bzz-raw://428ed5c94cdbfcef6b1bf90d495e7eb24cdaee233bd32e07dc7f3cbac4bcabb2\",\"dweb:/ipfs/QmdP2bLDsas8by7T5cq3qKoQg2KsRxFSCN4U2dmBPh7Dbt\"]},\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/mockContracts/BlockRewardHbbftCoinsMock.sol\":{\"keccak256\":\"0x78785df89cb618875ab78d6a867e8120ecced19f4151592353645c10c12bdf93\",\"urls\":[\"bzz-raw://462dc84b89fcd920c07ff257d71ba0b4000caca5b9d49c5c1da67cd01a2cf12a\",\"dweb:/ipfs/QmUHXPxyMpXqjkFEGDxmcpLAB3Avw74haYbjehV9oXDD9N\"]},\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/upgradeability/UpgradeabilityAdmin.sol\":{\"keccak256\":\"0x0b393066e706db35b9c523d3a21b63a5d9eafde51fdefbcbc4d6c815dff574a2\",\"urls\":[\"bzz-raw://493d9041c195ee69b05ab36000021c7171816f3efb2623c8d2a1d90118fb1fd9\",\"dweb:/ipfs/QmPuhiCNVZjM4B18cEpphc5juGTDcjhNcKnBDxexXMZ3Md\"]},\"/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/upgradeability/UpgradeableOwned.sol\":{\"keccak256\":\"0xe9eefd29c6ddb1827e99e9c6c61a5b2ccd2dc9d6a97d176bad914e0f1e8671ca\",\"urls\":[\"bzz-raw://359c65fd2eed4da4eea4a5c8ca855fd5f89975d6afb966b33540a15755d76a6b\",\"dweb:/ipfs/QmVB7diM5HApkF9njDKTMMpSMcAYj8RxCesyFaGkpGNeFh\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612a75806100206000396000f3fe60806040526004361061020e5760003560e01c80638737929a11610118578063cb68d127116100a0578063dd03f5b91161006f578063dd03f5b914610785578063dfc8bf4e146107b8578063e1ab96d8146107cd578063e58edc381461080c578063f302163d146108215761020e565b8063cb68d127146106be578063cdf7a090146106e8578063d0899cb414610712578063d88aebd7146107425761020e565b8063af182535116100e7578063af18253514610618578063b10c754814610620578063ba2d759714610628578063c4d66de814610661578063c6cc9333146106945761020e565b80638737929a1461059d57806391b57986146105d95780639a64ca2c146105ee578063adc481a7146106035761020e565b8063392e53cd1161019b578063527d8bc41161016a578063527d8bc4146104c55780635c57a801146104f85780635fba554e1461050d578063728345db1461054f57806373f12958146105885761020e565b8063392e53cd146103c35780633c2c943c146103ec578063469507c6146104015780634de6c0361461043a5761020e565b80630dcbf155116101e25780630dcbf155146102cc5780631274fa091461030b5780631345b8a51461032057806319cee8971461035957806333d699211461038a5761020e565b8062067a841461021857806306210197146102565780630c0d41731461028b5780630c556d66146102a0575b6008805434019055005b34801561022457600080fd5b506102446004803603602081101561023b57600080fd5b50351515610829565b60408051918252519081900360200190f35b34801561026257600080fd5b506102896004803603602081101561027957600080fd5b50356001600160a01b0316610fe7565b005b34801561029757600080fd5b50610244611009565b610289600480360360408110156102b657600080fd5b50803590602001356001600160a01b031661100e565b3480156102d857600080fd5b50610289600480360360608110156102ef57600080fd5b508035906001600160a01b036020820135169060400135611233565b34801561031757600080fd5b50610244611259565b34801561032c57600080fd5b506102446004803603604081101561034357600080fd5b50803590602001356001600160a01b031661125f565b34801561036557600080fd5b5061036e61127c565b604080516001600160a01b039092168252519081900360200190f35b34801561039657600080fd5b50610244600480360360408110156103ad57600080fd5b50803590602001356001600160a01b031661128b565b3480156103cf57600080fd5b506103d86112a8565b604080519115158252519081900360200190f35b3480156103f857600080fd5b506102446112b9565b34801561040d57600080fd5b506102896004803603604081101561042457600080fd5b50803590602001356001600160a01b03166112bf565b34801561044657600080fd5b506104756004803603604081101561045d57600080fd5b506001600160a01b038135811691602001351661135b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104b1578181015183820152602001610499565b505050509050019250505060405180910390f35b3480156104d157600080fd5b50610244600480360360208110156104e857600080fd5b50356001600160a01b031661177b565b34801561050457600080fd5b50610244611ad3565b34801561051957600080fd5b50610244600480360360a081101561053057600080fd5b5080359060208101359060408101359060608101359060800135611ad9565b34801561055b57600080fd5b506102446004803603604081101561057257600080fd5b50803590602001356001600160a01b0316611b6b565b34801561059457600080fd5b50610244611b88565b3480156105a957600080fd5b50610244600480360360808110156105c057600080fd5b5080359060208101359060408101359060600135611b8e565b3480156105e557600080fd5b50610244611c0a565b3480156105fa57600080fd5b50610244611c10565b34801561060f57600080fd5b50610244611c16565b610289611c1c565b610289611c26565b34801561063457600080fd5b506102446004803603604081101561064b57600080fd5b50803590602001356001600160a01b0316611c30565b34801561066d57600080fd5b506102896004803603602081101561068457600080fd5b50356001600160a01b0316611c8c565b3480156106a057600080fd5b50610289600480360360208110156106b757600080fd5b5035611e47565b3480156106ca57600080fd5b50610289600480360360208110156106e157600080fd5b5035611ef5565b3480156106f457600080fd5b506102446004803603602081101561070b57600080fd5b5035611fa3565b34801561071e57600080fd5b506102896004803603604081101561073557600080fd5b5080359060200135611fb5565b34801561074e57600080fd5b506102896004803603606081101561076557600080fd5b506001600160a01b03813581169160208101359160409091013516611fc7565b34801561079157600080fd5b50610475600480360360208110156107a857600080fd5b50356001600160a01b0316611fd7565b3480156107c457600080fd5b5061036e612041565b3480156107d957600080fd5b50610244600480360360608110156107f057600080fd5b50803590602081013590604001356001600160a01b0316612050565b34801561081857600080fd5b506102446120b8565b6102896120bf565b60006108336120c1565b6001600160a01b0316336001600160a01b03161461085057600080fd5b600a5460408051633ba6481760e21b815290516000926001600160a01b03169163ee99205c916004808301926020929190829003018186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d60208110156108bf57600080fd5b505190508215610c8d576000816001600160a01b031663794c0c686040518163ffffffff1660e01b815260040160206040518083038186803b15801561090457600080fd5b505afa158015610918573d6000803e3d6000fd5b505050506040513d602081101561092e57600080fd5b505190506000811561094657610943826120d0565b90505b6000808360010190506060600a60009054906101000a90046001600160a01b03166001600160a01b031663eebc7a396040518163ffffffff1660e01b815260040160006040518083038186803b15801561099f57600080fd5b505afa1580156109b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156109dc57600080fd5b8101908080516040519392919084600160201b8211156109fb57600080fd5b908301906020820185811115610a1057600080fd5b82518660208202830111600160201b82111715610a2c57600080fd5b82525081516020918201928201910280838360005b83811015610a59578181015183820152602001610a41565b505050509050016040525050509050600092505b8051831015610a9f57610a948683838681518110610a8757fe5b60200260200101516125dd565b600190920191610a6d565b600a60009054906101000a90046001600160a01b03166001600160a01b031663b7ab4db56040518163ffffffff1660e01b815260040160006040518083038186803b158015610aed57600080fd5b505afa158015610b01573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610b2a57600080fd5b8101908080516040519392919084600160201b821115610b4957600080fd5b908301906020820185811115610b5e57600080fd5b82518660208202830111600160201b82111715610b7a57600080fd5b82525081516020918201928201910280838360005b83811015610ba7578181015183820152602001610b8f565b505050509050016040525050509050600092505b8051831015610be057610bd58683838681518110610a8757fe5b600190920191610bbb565b600082815260056020526040808220601e9055600a548151637528621160e01b815291516001600160a01b03909116926375286211926004808201939182900301818387803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b50506040805187815290517ff32b9551d3414b67f8e66e20ac15e62694b9d1230abb2e2e48f9dc2e1964c4299350908190036020019150a160009650505050505050610fe2565b6000816001600160a01b031663c6912cc06040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc857600080fd5b505afa158015610cdc573d6000803e3d6000fd5b505050506040513d6020811015610cf257600080fd5b5051600a5460408051636c9230db60e01b815290519293506000926001600160a01b0390921691636c9230db91600480820192602092909190829003018186803b158015610d3f57600080fd5b505afa158015610d53573d6000803e3d6000fd5b505050506040513d6020811015610d6957600080fd5b505190506000828210801590610e945750600a60009054906101000a90046001600160a01b03166001600160a01b031663eebc7a396040518163ffffffff1660e01b815260040160006040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610e0557600080fd5b8101908080516040519392919084600160201b821115610e2457600080fd5b908301906020820185811115610e3957600080fd5b82518660208202830111600160201b82111715610e5557600080fd5b82525081516020918201928201910280838360005b83811015610e82578181015183820152602001610e6a565b50505050905001604052505050516000145b90508015610f0957600a60009054906101000a90046001600160a01b03166001600160a01b0316635ccee1de6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610eec57600080fd5b505af1158015610f00573d6000803e3d6000fd5b50505050610fdd565b836001600160a01b03166322e3d9866040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4257600080fd5b505afa158015610f56573d6000803e3d6000fd5b505050506040513d6020811015610f6c57600080fd5b50518210610fdd57600a60009054906101000a90046001600160a01b03166001600160a01b031663ade1900a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fc457600080fd5b505af1158015610fd8573d6000803e3d6000fd5b505050505b505050505b919050565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b601e81565b8161104a5760405162461bcd60e51b81526004018080602001828103825260248152602001806129f26024913960400191505060405180910390fd5b6001600160a01b03811661108f5760405162461bcd60e51b81526004018080602001828103825260248152602001806129f26024913960400191505060405180910390fd5b346110cb5760405162461bcd60e51b81526004018080602001828103825260258152602001806129376025913960400191505060405180910390fd5b60008281526001602090815260408083206001600160a01b03851684529091529020541561112a5760405162461bcd60e51b81526004018080602001828103825260358152602001806128d26035913960400191505060405180910390fd5b60008281526001602090815260408083206001600160a01b038516845282528083203490558282529182902080548351818402810184019094528084526060939283018282801561119a57602002820191906000526020600020905b815481526020019060010190808311611186575b50939450600093505050505b815181101561120957838282815181106111bc57fe5b602002602001015114156112015760405162461bcd60e51b815260040180806020018281038252603a8152602001806129b8603a913960400191505060405180910390fd5b6001016111a6565b50506001600160a01b03166000908152602081815260408220805460018101825590835291200155565b60009283526004602090815260408085206001600160a01b039094168552929052912055565b60095481565b600460209081526000928352604080842090915290825290205481565b600b546001600160a01b031681565b600160209081526000928352604080842090915290825290205481565b600a546001600160a01b0316151590565b600d5481565b600a60009054906101000a90046001600160a01b03166001600160a01b031663ee99205c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561130d57600080fd5b505afa158015611321573d6000803e3d6000fd5b505050506040513d602081101561133757600080fd5b50516001600160a01b0316331461134d57600080fd5b61135782826127d3565b5050565b600a54604080516253517560e01b81526001600160a01b0385811660048301529151606093600093169162535175916024808301926020929190829003018186803b1580156113a957600080fd5b505afa1580156113bd573d6000803e3d6000fd5b505050506040513d60208110156113d357600080fd5b5051600a5460408051633ba6481760e21b815290519293506000926001600160a01b039092169163ee99205c91600480820192602092909190829003018186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d602081101561144a57600080fd5b505190506001600160a01b0385811690851614801590600090819061158b5760408051632b2cdba160e11b81526001600160a01b038a811660048301528981166024830152915191861691635659b74291604480820192602092909190829003018186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d60208110156114e557600080fd5b505191508161150a575050604080516000815260208101909152935061177592505050565b6040805163bc9eb2c360e01b81526001600160a01b038a81166004830152898116602483015291519186169163bc9eb2c391604480820192602092909190829003018186803b15801561155c57600080fd5b505afa158015611570573d6000803e3d6000fd5b505050506040513d602081101561158657600080fd5b505190505b6001600160a01b0385166000908152602081815260409182902080548351818152818402810190930190935291906060908280156115d3578160200160208202803883390190505b5090506000805b838110156116fd5760008582815481106115f057fe5b90600052602060002001549050881561162b578781101561161157506116f5565b80871115801561162057508615155b1561162b57506116fd565b896001600160a01b031663317277308f8f846040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b03168152602001828152602001935050505060206040518083038186803b1580156116a357600080fd5b505afa1580156116b7573d6000803e3d6000fd5b505050506040513d60208110156116cd57600080fd5b50516116f357808484806001019550815181106116e657fe5b6020026020010181815250505b505b6001016115da565b81604051908082528060200260200182016040528015611727578160200160208202803883390190505b509a50600090505b8181101561176a5782818151811061174357fe5b60200260200101518b828151811061175757fe5b602090810291909101015260010161172f565b505050505050505050505b92915050565b600080600a60009054906101000a90046001600160a01b03166001600160a01b031663ee99205c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117cc57600080fd5b505afa1580156117e0573d6000803e3d6000fd5b505050506040513d60208110156117f657600080fd5b505160408051630f29818d60e31b815290519192506000916001600160a01b0384169163794c0c68916004808301926020929190829003018186803b15801561183e57600080fd5b505afa158015611852573d6000803e3d6000fd5b505050506040513d602081101561186857600080fd5b505190508061187c57600092505050610fe2565b600a54604080516253517560e01b81526001600160a01b038781166004830152915160009392909216916253517591602480820192602092909190829003018186803b1580156118cb57600080fd5b505afa1580156118df573d6000803e3d6000fd5b505050506040513d60208110156118f557600080fd5b5051600a546040805163a0d16cad60e01b81526001600160a01b038085166004830152915193945091169163a0d16cad91602480820192602092909190829003018186803b15801561194657600080fd5b505afa15801561195a573d6000803e3d6000fd5b505050506040513d602081101561197057600080fd5b5051156119c85760008281526004602090815260408083206001600160a01b03851680855290835281842054868552600384528285209185529252909120546119be918491620f4240611b8e565b9350505050610fe2565b6040805163a697ecff60e01b81526001600160a01b038781166004830181905260248301529151611aca9285929087169163a697ecff91604480820192602092909190829003018186803b158015611a1f57600080fd5b505afa158015611a33573d6000803e3d6000fd5b505050506040513d6020811015611a4957600080fd5b505160408051632933f0eb60e11b81526001600160a01b038a81166004830152915191881691635267e1d691602480820192602092909190829003018186803b158015611a9557600080fd5b505afa158015611aa9573d6000803e3d6000fd5b505050506040513d6020811015611abf57600080fd5b5051620f4240611b8e565b95945050505050565b60065481565b6000841580611ae6575083155b80611aef575082155b15611afc57506000611aca565b60008085851015611b0e576000611b12565b8585035b600089815260056020526040902054909150808202606482900388021115611b47578588860281611b3f57fe5b049250611b5e565b81606402816064038987020281611b5a57fe5b0492505b5090979650505050505050565b600360209081526000928352604080842090915290825290205481565b60085481565b6000831580611b9b575082155b15611ba857506000611c02565b60008085851015611bba576000611bbe565b8585035b600088815260056020526040902054909150808202606482900388021115611bf3578587860281611beb57fe5b049250611bfc565b60648582020492505b50909150505b949350505050565b600c5481565b60075481565b60025481565b6008805434019055565b6006805434019055565b60008281526004602090815260408083206001600160a01b0385168085529083528184205486855260038452828520828652845282852054878652600185528386209286529190935290832054611aca90869084908490611b8e565b611c9461284a565b6001600160a01b0316336001600160a01b03161480611ccb5750611cb661284a565b6001600160a01b0316326001600160a01b0316145b80611ce45750611cd961284a565b6001600160a01b0316155b80611ced575043155b611d285760405162461bcd60e51b81526004018080602001828103825260308152602001806129076030913960400191505060405180910390fd5b611d306112a8565b15611d6c5760405162461bcd60e51b81526004018080602001828103825260248152602001806128ae6024913960400191505060405180910390fd5b6001600160a01b038116611dc7576040805162461bcd60e51b815260206004820152601a60248201527f56616c696461746f72536574206d757374206e6f742062652030000000000000604482015290519081900360640190fd5b600a80546001600160a01b039092166001600160a01b0319928316178155600080526005602052601e7f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc556117706007819055600955600b805490921673da0da0da0da0da0da0da00da0da0da0da0da0da0179091556001600c55600d55565b611e4f61284a565b6001600160a01b0316336001600160a01b031614611e9e5760405162461bcd60e51b815260040180806020018281038252602b815260200180612a16602b913960400191505060405180910390fd5b80611ef0576040805162461bcd60e51b815260206004820152601d60248201527f5061796f7574206672616374696f6e206d757374206e6f742062652030000000604482015290519081900360640190fd5b600955565b611efd61284a565b6001600160a01b0316336001600160a01b031614611f4c5760405162461bcd60e51b815260040180806020018281038252602b815260200180612a16602b913960400191505060405180910390fd5b80611f9e576040805162461bcd60e51b815260206004820152601d60248201527f5061796f7574206672616374696f6e206d757374206e6f742062652030000000604482015290519081900360640190fd5b600755565b60056020526000908152604090205481565b60009182526005602052604090912055565b611fd28383836125dd565b505050565b6001600160a01b0381166000908152602081815260409182902080548351818402810184019094528084526060939283018282801561203557602002820191906000526020600020905b815481526020019060010190808311612021575b50505050509050919050565b600a546001600160a01b031681565b60008281526004602090815260408083206001600160a01b03851680855290835281842054868552600384528285208286528452828520548786526001855283862092865291909352908320546120ae908690889085908590611ad9565b9695505050505050565b620f424081565b565b600e546001600160a01b031690565b60006060600a60009054906101000a90046001600160a01b03166001600160a01b031663b7ab4db56040518163ffffffff1660e01b815260040160006040518083038186803b15801561212257600080fd5b505afa158015612136573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561215f57600080fd5b8101908080516040519392919084600160201b82111561217e57600080fd5b90830190602082018581111561219357600080fd5b82518660208202830111600160201b821117156121af57600080fd5b82525081516020918201928201910280838360005b838110156121dc5781810151838201526020016121c4565b505050509190910160405250508251929350505080612239576040805162461bcd60e51b8152602060048201526014602482015273115b5c1d1e4815985b1a59185d1bdc881b1a5cdd60621b604482015290519081900360640190fd5b60006007546006548161224857fe5b0490508060066000828254039250508190555060006009546008548161226a57fe5b6008805492909104918290039055600254909150828201018061229557600095505050505050610fe2565b6000600d54600c548302816122a657fe5b600b546040519290910492506001600160a01b03169082156108fc029083906000818181858888f193505050501580156122e4573d6000803e3d6000fd5b5060008183039050606086604051908082528060200260200182016040528015612318578160200160208202803883390190505b5090506000805b895181101561244e57600a548a516001600160a01b039091169063a92252ae908c908490811061234b57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561239957600080fd5b505afa1580156123ad573d6000803e3d6000fd5b505050506040513d60208110156123c357600080fd5b505115801561241c5750600460008d815260200190815260200160002060008b83815181106123ee57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054600014155b1561244657600183828151811061242f57fe5b911515602092830291909101909101526001909101905b60010161231f565b50806124665760009950505050505050505050610fe2565b600081848161247157fe5b04905080156125c85760005b898110156125c65783818151811061249157fe5b6020026020010151156125be57600160008e815260200190815260200160002060008c83815181106124bf57fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546000146125265760405162461bcd60e51b815260040180806020018281038252605c81526020018061295c605c913960600191505060405180910390fd5b60008d81526001602052604081208c518492908e908590811061254557fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555081860195506000808c838151811061258557fe5b6020908102919091018101516001600160a01b031682528181019290925260400160009081208054600181018255908252919020018d90555b60010161247d565b505b50505050908190036002559695505050505050565b60008281526003602090815260408083206001600160a01b03851684529091529020541561260a57611fd2565b600a54604080516307b9342f60e21b81526001600160a01b03848116600483015291516000939290921691631ee4d0bc91602480820192602092909190829003018186803b15801561265b57600080fd5b505afa15801561266f573d6000803e3d6000fd5b505050506040513d602081101561268557600080fd5b505160408051632933f0eb60e11b81526001600160a01b038084166004830152915192935060009291871691635267e1d691602480820192602092909190829003018186803b1580156126d757600080fd5b505afa1580156126eb573d6000803e3d6000fd5b505050506040513d602081101561270157600080fd5b5051905080612711575050611fd2565b60008481526003602090815260408083206001600160a01b03808816855290835292819020849055805163a697ecff60e01b815285841660048201819052602482015290519288169263a697ecff92604480840193919291829003018186803b15801561277d57600080fd5b505afa158015612791573d6000803e3d6000fd5b505050506040513d60208110156127a757600080fd5b505160008581526004602090815260408083206001600160a01b03881684529091529020555050505050565b811580159061280457506040516001600160a01b0382169083156108fc029084906000818181858888f19350505050155b156113575781816040516128179061286f565b6001600160a01b039091168152604051908190036020019082f080158015612843573d6000803e3d6000fd5b5050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b60328061287c8339019056fe60806040526040516032380380603283398181016040526020811015602357600080fd5b50516001600160a01b038116fffe696e697469616c697a6174696f6e2063616e206f6e6c7920626520646f6e65206f6e636553657445706f6368506f6f6c5265776172643a2065706f6368506f6f6c4e617469766552657761726420616c726561647920736574496e697469616c697a6174696f6e206f6e6c79206f6e2067656e6573697320626c6f636b206f722062792061646d696e53657445706f6368506f6f6c5265776172643a207265776172642063616e2774206265203063616e74206469737472696275746520726577617264733a20746865726520697320616c7265616479206120706f6f6c2072657761726420646566696e656420666f7220746869732065706f636820616e642076616c696461746f72546865726520697320616c72656164792061205265776172642070656e64696e6720666f722074686973206d696e696e6720616464726573732153657445706f6368506f6f6c5265776172643a2065706f63682063616e277420626520306f6e6c792061646d696e20697320616c6c6f77656420746f2063616c6c20746869732066756e6374696f6ea265627a7a723158200ccc04d95080537e8b6c24fe154c0d8f06f8f746d1934a8d1807c389e2dc95be64736f6c63430005110032",
  "deployedBytecode": "0x60806040526004361061020e5760003560e01c80638737929a11610118578063cb68d127116100a0578063dd03f5b91161006f578063dd03f5b914610785578063dfc8bf4e146107b8578063e1ab96d8146107cd578063e58edc381461080c578063f302163d146108215761020e565b8063cb68d127146106be578063cdf7a090146106e8578063d0899cb414610712578063d88aebd7146107425761020e565b8063af182535116100e7578063af18253514610618578063b10c754814610620578063ba2d759714610628578063c4d66de814610661578063c6cc9333146106945761020e565b80638737929a1461059d57806391b57986146105d95780639a64ca2c146105ee578063adc481a7146106035761020e565b8063392e53cd1161019b578063527d8bc41161016a578063527d8bc4146104c55780635c57a801146104f85780635fba554e1461050d578063728345db1461054f57806373f12958146105885761020e565b8063392e53cd146103c35780633c2c943c146103ec578063469507c6146104015780634de6c0361461043a5761020e565b80630dcbf155116101e25780630dcbf155146102cc5780631274fa091461030b5780631345b8a51461032057806319cee8971461035957806333d699211461038a5761020e565b8062067a841461021857806306210197146102565780630c0d41731461028b5780630c556d66146102a0575b6008805434019055005b34801561022457600080fd5b506102446004803603602081101561023b57600080fd5b50351515610829565b60408051918252519081900360200190f35b34801561026257600080fd5b506102896004803603602081101561027957600080fd5b50356001600160a01b0316610fe7565b005b34801561029757600080fd5b50610244611009565b610289600480360360408110156102b657600080fd5b50803590602001356001600160a01b031661100e565b3480156102d857600080fd5b50610289600480360360608110156102ef57600080fd5b508035906001600160a01b036020820135169060400135611233565b34801561031757600080fd5b50610244611259565b34801561032c57600080fd5b506102446004803603604081101561034357600080fd5b50803590602001356001600160a01b031661125f565b34801561036557600080fd5b5061036e61127c565b604080516001600160a01b039092168252519081900360200190f35b34801561039657600080fd5b50610244600480360360408110156103ad57600080fd5b50803590602001356001600160a01b031661128b565b3480156103cf57600080fd5b506103d86112a8565b604080519115158252519081900360200190f35b3480156103f857600080fd5b506102446112b9565b34801561040d57600080fd5b506102896004803603604081101561042457600080fd5b50803590602001356001600160a01b03166112bf565b34801561044657600080fd5b506104756004803603604081101561045d57600080fd5b506001600160a01b038135811691602001351661135b565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104b1578181015183820152602001610499565b505050509050019250505060405180910390f35b3480156104d157600080fd5b50610244600480360360208110156104e857600080fd5b50356001600160a01b031661177b565b34801561050457600080fd5b50610244611ad3565b34801561051957600080fd5b50610244600480360360a081101561053057600080fd5b5080359060208101359060408101359060608101359060800135611ad9565b34801561055b57600080fd5b506102446004803603604081101561057257600080fd5b50803590602001356001600160a01b0316611b6b565b34801561059457600080fd5b50610244611b88565b3480156105a957600080fd5b50610244600480360360808110156105c057600080fd5b5080359060208101359060408101359060600135611b8e565b3480156105e557600080fd5b50610244611c0a565b3480156105fa57600080fd5b50610244611c10565b34801561060f57600080fd5b50610244611c16565b610289611c1c565b610289611c26565b34801561063457600080fd5b506102446004803603604081101561064b57600080fd5b50803590602001356001600160a01b0316611c30565b34801561066d57600080fd5b506102896004803603602081101561068457600080fd5b50356001600160a01b0316611c8c565b3480156106a057600080fd5b50610289600480360360208110156106b757600080fd5b5035611e47565b3480156106ca57600080fd5b50610289600480360360208110156106e157600080fd5b5035611ef5565b3480156106f457600080fd5b506102446004803603602081101561070b57600080fd5b5035611fa3565b34801561071e57600080fd5b506102896004803603604081101561073557600080fd5b5080359060200135611fb5565b34801561074e57600080fd5b506102896004803603606081101561076557600080fd5b506001600160a01b03813581169160208101359160409091013516611fc7565b34801561079157600080fd5b50610475600480360360208110156107a857600080fd5b50356001600160a01b0316611fd7565b3480156107c457600080fd5b5061036e612041565b3480156107d957600080fd5b50610244600480360360608110156107f057600080fd5b50803590602081013590604001356001600160a01b0316612050565b34801561081857600080fd5b506102446120b8565b6102896120bf565b60006108336120c1565b6001600160a01b0316336001600160a01b03161461085057600080fd5b600a5460408051633ba6481760e21b815290516000926001600160a01b03169163ee99205c916004808301926020929190829003018186803b15801561089557600080fd5b505afa1580156108a9573d6000803e3d6000fd5b505050506040513d60208110156108bf57600080fd5b505190508215610c8d576000816001600160a01b031663794c0c686040518163ffffffff1660e01b815260040160206040518083038186803b15801561090457600080fd5b505afa158015610918573d6000803e3d6000fd5b505050506040513d602081101561092e57600080fd5b505190506000811561094657610943826120d0565b90505b6000808360010190506060600a60009054906101000a90046001600160a01b03166001600160a01b031663eebc7a396040518163ffffffff1660e01b815260040160006040518083038186803b15801561099f57600080fd5b505afa1580156109b3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156109dc57600080fd5b8101908080516040519392919084600160201b8211156109fb57600080fd5b908301906020820185811115610a1057600080fd5b82518660208202830111600160201b82111715610a2c57600080fd5b82525081516020918201928201910280838360005b83811015610a59578181015183820152602001610a41565b505050509050016040525050509050600092505b8051831015610a9f57610a948683838681518110610a8757fe5b60200260200101516125dd565b600190920191610a6d565b600a60009054906101000a90046001600160a01b03166001600160a01b031663b7ab4db56040518163ffffffff1660e01b815260040160006040518083038186803b158015610aed57600080fd5b505afa158015610b01573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610b2a57600080fd5b8101908080516040519392919084600160201b821115610b4957600080fd5b908301906020820185811115610b5e57600080fd5b82518660208202830111600160201b82111715610b7a57600080fd5b82525081516020918201928201910280838360005b83811015610ba7578181015183820152602001610b8f565b505050509050016040525050509050600092505b8051831015610be057610bd58683838681518110610a8757fe5b600190920191610bbb565b600082815260056020526040808220601e9055600a548151637528621160e01b815291516001600160a01b03909116926375286211926004808201939182900301818387803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b50506040805187815290517ff32b9551d3414b67f8e66e20ac15e62694b9d1230abb2e2e48f9dc2e1964c4299350908190036020019150a160009650505050505050610fe2565b6000816001600160a01b031663c6912cc06040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc857600080fd5b505afa158015610cdc573d6000803e3d6000fd5b505050506040513d6020811015610cf257600080fd5b5051600a5460408051636c9230db60e01b815290519293506000926001600160a01b0390921691636c9230db91600480820192602092909190829003018186803b158015610d3f57600080fd5b505afa158015610d53573d6000803e3d6000fd5b505050506040513d6020811015610d6957600080fd5b505190506000828210801590610e945750600a60009054906101000a90046001600160a01b03166001600160a01b031663eebc7a396040518163ffffffff1660e01b815260040160006040518083038186803b158015610dc857600080fd5b505afa158015610ddc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610e0557600080fd5b8101908080516040519392919084600160201b821115610e2457600080fd5b908301906020820185811115610e3957600080fd5b82518660208202830111600160201b82111715610e5557600080fd5b82525081516020918201928201910280838360005b83811015610e82578181015183820152602001610e6a565b50505050905001604052505050516000145b90508015610f0957600a60009054906101000a90046001600160a01b03166001600160a01b0316635ccee1de6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610eec57600080fd5b505af1158015610f00573d6000803e3d6000fd5b50505050610fdd565b836001600160a01b03166322e3d9866040518163ffffffff1660e01b815260040160206040518083038186803b158015610f4257600080fd5b505afa158015610f56573d6000803e3d6000fd5b505050506040513d6020811015610f6c57600080fd5b50518210610fdd57600a60009054906101000a90046001600160a01b03166001600160a01b031663ade1900a6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610fc457600080fd5b505af1158015610fd8573d6000803e3d6000fd5b505050505b505050505b919050565b600e80546001600160a01b0319166001600160a01b0392909216919091179055565b601e81565b8161104a5760405162461bcd60e51b81526004018080602001828103825260248152602001806129f26024913960400191505060405180910390fd5b6001600160a01b03811661108f5760405162461bcd60e51b81526004018080602001828103825260248152602001806129f26024913960400191505060405180910390fd5b346110cb5760405162461bcd60e51b81526004018080602001828103825260258152602001806129376025913960400191505060405180910390fd5b60008281526001602090815260408083206001600160a01b03851684529091529020541561112a5760405162461bcd60e51b81526004018080602001828103825260358152602001806128d26035913960400191505060405180910390fd5b60008281526001602090815260408083206001600160a01b038516845282528083203490558282529182902080548351818402810184019094528084526060939283018282801561119a57602002820191906000526020600020905b815481526020019060010190808311611186575b50939450600093505050505b815181101561120957838282815181106111bc57fe5b602002602001015114156112015760405162461bcd60e51b815260040180806020018281038252603a8152602001806129b8603a913960400191505060405180910390fd5b6001016111a6565b50506001600160a01b03166000908152602081815260408220805460018101825590835291200155565b60009283526004602090815260408085206001600160a01b039094168552929052912055565b60095481565b600460209081526000928352604080842090915290825290205481565b600b546001600160a01b031681565b600160209081526000928352604080842090915290825290205481565b600a546001600160a01b0316151590565b600d5481565b600a60009054906101000a90046001600160a01b03166001600160a01b031663ee99205c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561130d57600080fd5b505afa158015611321573d6000803e3d6000fd5b505050506040513d602081101561133757600080fd5b50516001600160a01b0316331461134d57600080fd5b61135782826127d3565b5050565b600a54604080516253517560e01b81526001600160a01b0385811660048301529151606093600093169162535175916024808301926020929190829003018186803b1580156113a957600080fd5b505afa1580156113bd573d6000803e3d6000fd5b505050506040513d60208110156113d357600080fd5b5051600a5460408051633ba6481760e21b815290519293506000926001600160a01b039092169163ee99205c91600480820192602092909190829003018186803b15801561142057600080fd5b505afa158015611434573d6000803e3d6000fd5b505050506040513d602081101561144a57600080fd5b505190506001600160a01b0385811690851614801590600090819061158b5760408051632b2cdba160e11b81526001600160a01b038a811660048301528981166024830152915191861691635659b74291604480820192602092909190829003018186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d60208110156114e557600080fd5b505191508161150a575050604080516000815260208101909152935061177592505050565b6040805163bc9eb2c360e01b81526001600160a01b038a81166004830152898116602483015291519186169163bc9eb2c391604480820192602092909190829003018186803b15801561155c57600080fd5b505afa158015611570573d6000803e3d6000fd5b505050506040513d602081101561158657600080fd5b505190505b6001600160a01b0385166000908152602081815260409182902080548351818152818402810190930190935291906060908280156115d3578160200160208202803883390190505b5090506000805b838110156116fd5760008582815481106115f057fe5b90600052602060002001549050881561162b578781101561161157506116f5565b80871115801561162057508615155b1561162b57506116fd565b896001600160a01b031663317277308f8f846040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b03168152602001828152602001935050505060206040518083038186803b1580156116a357600080fd5b505afa1580156116b7573d6000803e3d6000fd5b505050506040513d60208110156116cd57600080fd5b50516116f357808484806001019550815181106116e657fe5b6020026020010181815250505b505b6001016115da565b81604051908082528060200260200182016040528015611727578160200160208202803883390190505b509a50600090505b8181101561176a5782818151811061174357fe5b60200260200101518b828151811061175757fe5b602090810291909101015260010161172f565b505050505050505050505b92915050565b600080600a60009054906101000a90046001600160a01b03166001600160a01b031663ee99205c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117cc57600080fd5b505afa1580156117e0573d6000803e3d6000fd5b505050506040513d60208110156117f657600080fd5b505160408051630f29818d60e31b815290519192506000916001600160a01b0384169163794c0c68916004808301926020929190829003018186803b15801561183e57600080fd5b505afa158015611852573d6000803e3d6000fd5b505050506040513d602081101561186857600080fd5b505190508061187c57600092505050610fe2565b600a54604080516253517560e01b81526001600160a01b038781166004830152915160009392909216916253517591602480820192602092909190829003018186803b1580156118cb57600080fd5b505afa1580156118df573d6000803e3d6000fd5b505050506040513d60208110156118f557600080fd5b5051600a546040805163a0d16cad60e01b81526001600160a01b038085166004830152915193945091169163a0d16cad91602480820192602092909190829003018186803b15801561194657600080fd5b505afa15801561195a573d6000803e3d6000fd5b505050506040513d602081101561197057600080fd5b5051156119c85760008281526004602090815260408083206001600160a01b03851680855290835281842054868552600384528285209185529252909120546119be918491620f4240611b8e565b9350505050610fe2565b6040805163a697ecff60e01b81526001600160a01b038781166004830181905260248301529151611aca9285929087169163a697ecff91604480820192602092909190829003018186803b158015611a1f57600080fd5b505afa158015611a33573d6000803e3d6000fd5b505050506040513d6020811015611a4957600080fd5b505160408051632933f0eb60e11b81526001600160a01b038a81166004830152915191881691635267e1d691602480820192602092909190829003018186803b158015611a9557600080fd5b505afa158015611aa9573d6000803e3d6000fd5b505050506040513d6020811015611abf57600080fd5b5051620f4240611b8e565b95945050505050565b60065481565b6000841580611ae6575083155b80611aef575082155b15611afc57506000611aca565b60008085851015611b0e576000611b12565b8585035b600089815260056020526040902054909150808202606482900388021115611b47578588860281611b3f57fe5b049250611b5e565b81606402816064038987020281611b5a57fe5b0492505b5090979650505050505050565b600360209081526000928352604080842090915290825290205481565b60085481565b6000831580611b9b575082155b15611ba857506000611c02565b60008085851015611bba576000611bbe565b8585035b600088815260056020526040902054909150808202606482900388021115611bf3578587860281611beb57fe5b049250611bfc565b60648582020492505b50909150505b949350505050565b600c5481565b60075481565b60025481565b6008805434019055565b6006805434019055565b60008281526004602090815260408083206001600160a01b0385168085529083528184205486855260038452828520828652845282852054878652600185528386209286529190935290832054611aca90869084908490611b8e565b611c9461284a565b6001600160a01b0316336001600160a01b03161480611ccb5750611cb661284a565b6001600160a01b0316326001600160a01b0316145b80611ce45750611cd961284a565b6001600160a01b0316155b80611ced575043155b611d285760405162461bcd60e51b81526004018080602001828103825260308152602001806129076030913960400191505060405180910390fd5b611d306112a8565b15611d6c5760405162461bcd60e51b81526004018080602001828103825260248152602001806128ae6024913960400191505060405180910390fd5b6001600160a01b038116611dc7576040805162461bcd60e51b815260206004820152601a60248201527f56616c696461746f72536574206d757374206e6f742062652030000000000000604482015290519081900360640190fd5b600a80546001600160a01b039092166001600160a01b0319928316178155600080526005602052601e7f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc556117706007819055600955600b805490921673da0da0da0da0da0da0da00da0da0da0da0da0da0179091556001600c55600d55565b611e4f61284a565b6001600160a01b0316336001600160a01b031614611e9e5760405162461bcd60e51b815260040180806020018281038252602b815260200180612a16602b913960400191505060405180910390fd5b80611ef0576040805162461bcd60e51b815260206004820152601d60248201527f5061796f7574206672616374696f6e206d757374206e6f742062652030000000604482015290519081900360640190fd5b600955565b611efd61284a565b6001600160a01b0316336001600160a01b031614611f4c5760405162461bcd60e51b815260040180806020018281038252602b815260200180612a16602b913960400191505060405180910390fd5b80611f9e576040805162461bcd60e51b815260206004820152601d60248201527f5061796f7574206672616374696f6e206d757374206e6f742062652030000000604482015290519081900360640190fd5b600755565b60056020526000908152604090205481565b60009182526005602052604090912055565b611fd28383836125dd565b505050565b6001600160a01b0381166000908152602081815260409182902080548351818402810184019094528084526060939283018282801561203557602002820191906000526020600020905b815481526020019060010190808311612021575b50505050509050919050565b600a546001600160a01b031681565b60008281526004602090815260408083206001600160a01b03851680855290835281842054868552600384528285208286528452828520548786526001855283862092865291909352908320546120ae908690889085908590611ad9565b9695505050505050565b620f424081565b565b600e546001600160a01b031690565b60006060600a60009054906101000a90046001600160a01b03166001600160a01b031663b7ab4db56040518163ffffffff1660e01b815260040160006040518083038186803b15801561212257600080fd5b505afa158015612136573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561215f57600080fd5b8101908080516040519392919084600160201b82111561217e57600080fd5b90830190602082018581111561219357600080fd5b82518660208202830111600160201b821117156121af57600080fd5b82525081516020918201928201910280838360005b838110156121dc5781810151838201526020016121c4565b505050509190910160405250508251929350505080612239576040805162461bcd60e51b8152602060048201526014602482015273115b5c1d1e4815985b1a59185d1bdc881b1a5cdd60621b604482015290519081900360640190fd5b60006007546006548161224857fe5b0490508060066000828254039250508190555060006009546008548161226a57fe5b6008805492909104918290039055600254909150828201018061229557600095505050505050610fe2565b6000600d54600c548302816122a657fe5b600b546040519290910492506001600160a01b03169082156108fc029083906000818181858888f193505050501580156122e4573d6000803e3d6000fd5b5060008183039050606086604051908082528060200260200182016040528015612318578160200160208202803883390190505b5090506000805b895181101561244e57600a548a516001600160a01b039091169063a92252ae908c908490811061234b57fe5b60200260200101516040518263ffffffff1660e01b815260040180826001600160a01b03166001600160a01b0316815260200191505060206040518083038186803b15801561239957600080fd5b505afa1580156123ad573d6000803e3d6000fd5b505050506040513d60208110156123c357600080fd5b505115801561241c5750600460008d815260200190815260200160002060008b83815181106123ee57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054600014155b1561244657600183828151811061242f57fe5b911515602092830291909101909101526001909101905b60010161231f565b50806124665760009950505050505050505050610fe2565b600081848161247157fe5b04905080156125c85760005b898110156125c65783818151811061249157fe5b6020026020010151156125be57600160008e815260200190815260200160002060008c83815181106124bf57fe5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020546000146125265760405162461bcd60e51b815260040180806020018281038252605c81526020018061295c605c913960600191505060405180910390fd5b60008d81526001602052604081208c518492908e908590811061254557fe5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208190555081860195506000808c838151811061258557fe5b6020908102919091018101516001600160a01b031682528181019290925260400160009081208054600181018255908252919020018d90555b60010161247d565b505b50505050908190036002559695505050505050565b60008281526003602090815260408083206001600160a01b03851684529091529020541561260a57611fd2565b600a54604080516307b9342f60e21b81526001600160a01b03848116600483015291516000939290921691631ee4d0bc91602480820192602092909190829003018186803b15801561265b57600080fd5b505afa15801561266f573d6000803e3d6000fd5b505050506040513d602081101561268557600080fd5b505160408051632933f0eb60e11b81526001600160a01b038084166004830152915192935060009291871691635267e1d691602480820192602092909190829003018186803b1580156126d757600080fd5b505afa1580156126eb573d6000803e3d6000fd5b505050506040513d602081101561270157600080fd5b5051905080612711575050611fd2565b60008481526003602090815260408083206001600160a01b03808816855290835292819020849055805163a697ecff60e01b815285841660048201819052602482015290519288169263a697ecff92604480840193919291829003018186803b15801561277d57600080fd5b505afa158015612791573d6000803e3d6000fd5b505050506040513d60208110156127a757600080fd5b505160008581526004602090815260408083206001600160a01b03881684529091529020555050505050565b811580159061280457506040516001600160a01b0382169083156108fc029084906000818181858888f19350505050155b156113575781816040516128179061286f565b6001600160a01b039091168152604051908190036020019082f080158015612843573d6000803e3d6000fd5b5050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b60328061287c8339019056fe60806040526040516032380380603283398181016040526020811015602357600080fd5b50516001600160a01b038116fffe696e697469616c697a6174696f6e2063616e206f6e6c7920626520646f6e65206f6e636553657445706f6368506f6f6c5265776172643a2065706f6368506f6f6c4e617469766552657761726420616c726561647920736574496e697469616c697a6174696f6e206f6e6c79206f6e2067656e6573697320626c6f636b206f722062792061646d696e53657445706f6368506f6f6c5265776172643a207265776172642063616e2774206265203063616e74206469737472696275746520726577617264733a20746865726520697320616c7265616479206120706f6f6c2072657761726420646566696e656420666f7220746869732065706f636820616e642076616c696461746f72546865726520697320616c72656164792061205265776172642070656e64696e6720666f722074686973206d696e696e6720616464726573732153657445706f6368506f6f6c5265776172643a2065706f63682063616e277420626520306f6e6c792061646d696e20697320616c6c6f77656420746f2063616c6c20746869732066756e6374696f6ea265627a7a723158200ccc04d95080537e8b6c24fe154c0d8f06f8f746d1934a8d1807c389e2dc95be64736f6c63430005110032",
  "sourceMap": "126:1058:29:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;126:1058:29;;;;;;;",
  "deployedSourceMap": "126:1058:29:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5421:11:10;:24;;5436:9;5421:24;;;126:1058:29;8758:4077:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;8758:4077:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8758:4077:10;;;;:::i;:::-;;;;;;;;;;;;;;;;584:97:28;;8:9:-1;5:2;;;30:1;27;20:12;5:2;584:97:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;584:97:28;-1:-1:-1;;;;;584:97:28;;:::i;:::-;;3847:57:10;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3847:57:10;;;:::i;218:964:29:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;218:964:29;;;;;;-1:-1:-1;;;;;218:964:29;;:::i;1098:218:28:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1098:218:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1098:218:28;;;-1:-1:-1;;;;;1098:218:28;;;;;;;;;;:::i;3177:40:10:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3177:40:10;;;:::i;1826:87::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1826:87:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1826:87:10;;;;;;-1:-1:-1;;;;;1826:87:10;;:::i;3409:43::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3409:43:10;;;:::i;:::-;;;;-1:-1:-1;;;;;3409:43:10;;;;;;;;;;;;;;1157:76;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1157:76:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1157:76:10;;;;;;-1:-1:-1;;;;;1157:76:10;;:::i;13353:132::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13353:132:10;;;:::i;:::-;;;;;;;;;;;;;;;;;;3796:44;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3796:44:10;;;:::i;655:161:11:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;655:161:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;655:161:11;;;;;;-1:-1:-1;;;;;655:161:11;;:::i;13805:1934:10:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13805:1934:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;13805:1934:10;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;13805:1934:10;;;;;;;;;;;;;;;;;16295:1436;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16295:1436:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;16295:1436:10;-1:-1:-1;;;;;16295:1436:10;;:::i;2564:23::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2564:23:10;;;:::i;18234:1005::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;18234:1005:10;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;18234:1005:10;;;;;;;;;;;;;;;;;;;;;;:::i;1556:83::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1556:83:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1556:83:10;;;;;;-1:-1:-1;;;;;1556:83:10;;:::i;2960:26::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2960:26:10;;;:::i;19706:898::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19706:898:10;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;-1:-1;19706:898:10;;;;;;;;;;;;;;;;;:::i;3603:42::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3603:42:10;;;:::i;2772:37::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2772:37:10;;;:::i;1335:40::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1335:40:10;;;:::i;7239:94::-;;;:::i;6706:88::-;;;:::i;2502:559:11:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2502:559:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2502:559:11;;;;;;-1:-1:-1;;;;;2502:559:11;;:::i;5685:766:10:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5685:766:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;5685:766:10;-1:-1:-1;;;;;5685:766:10;;:::i;7989:200::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7989:200:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7989:200:10;;:::i;7538:190::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;7538:190:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;7538:190:10;;:::i;2391:60::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;2391:60:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2391:60:10;;:::i;687:158:28:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;687:158:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;687:158:28;;;;;;;:::i;851:241::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;851:241:28;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;851:241:28;;;;;;;;;;;;;;;;;:::i;13085:169:10:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;13085:169:10;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;13085:169:10;-1:-1:-1;;;;;13085:169:10;;:::i;3281:46::-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3281:46:10;;;:::i;1490:621:11:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1490:621:11;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1490:621:11;;;;;;;;;;;-1:-1:-1;;;;;1490:621:11;;:::i;3917:59:10:-;;8:9:-1;5:2;;;30:1;27;20:12;5:2;3917:59:10;;;:::i;527:51:28:-;;;:::i;8758:4077:10:-;8837:21;362:19:28;:17;:19::i;:::-;-1:-1:-1;;;;;348:33:28;:10;-1:-1:-1;;;;;348:33:28;;340:42;;;;;;8920:20:10;;:38;;;-1:-1:-1;;;8920:38:10;;;;8874:29;;-1:-1:-1;;;;;8920:20:10;;:36;;:38;;;;;;;;;;;;;;:20;:38;;;5:2:-1;;;;30:1;27;20:12;5:2;8920:38:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;8920:38:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;8920:38:10;;-1:-1:-1;9056:3773:10;;;;9106:20;9129:15;-1:-1:-1;;;;;9129:28:10;;:30;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9129:30:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9129:30:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9129:30:10;;-1:-1:-1;9174:31:10;9279:17;;9275:114;;9342:32;9361:12;9342:18;:32::i;:::-;9316:58;;9275:114;9463:9;9486:24;9513:12;9528:1;9513:16;9486:43;;9543:32;9809:20;;;;;;;;;-1:-1:-1;;;;;9809:20:10;-1:-1:-1;;;;;9809:41:10;;:43;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;9809:43:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9809:43:10;;;;;;39:16:-1;36:1;17:17;2:54;101:4;9809:43:10;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:2;5:11;;2:2;;;29:1;26;19:12;2:2;9809:43:10;;;;;;;;;;;;;-1:-1:-1;;;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;-1:-1;;;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;373:25;;-1:-1;9809:43:10;;421:4:-1;412:14;;;;9809:43:10;;;;;412:14:-1;9809:43:10;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;9809:43:10;;;;;;;;;;;9791:61;;9875:1;9871:5;;9866:158;9882:15;:22;9878:1;:26;9866:158;;;9929:80;9955:15;9972:16;9990:15;10006:1;9990:18;;;;;;;;;;;;;;9929:25;:80::i;:::-;9906:3;;;;;9866:158;;;10356:20;;;;;;;;;-1:-1:-1;;;;;10356:20:10;-1:-1:-1;;;;;10356:34:10;;:36;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;10356:36:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;10356:36:10;;;;;;39:16:-1;36:1;17:17;2:54;101:4;10356:36:10;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:2;5:11;;2:2;;;29:1;26;19:12;2:2;10356:36:10;;;;;;;;;;;;;-1:-1:-1;;;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;-1:-1;;;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;373:25;;-1:-1;10356:36:10;;421:4:-1;412:14;;;;10356:36:10;;;;;412:14:-1;10356:36:10;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;10356:36:10;;;;;;;;;;;10338:54;;10415:1;10411:5;;10406:158;10422:15;:22;10418:1;:26;10406:158;;;10469:80;10495:15;10512:16;10530:15;10546:1;10530:18;;;;;;;10469:80;10446:3;;;;;10406:158;;;10663:43;;;;:25;:43;;;;;;3902:2;10663:74;;10868:20;;:37;;-1:-1:-1;;;10868:37:10;;;;-1:-1:-1;;;;;10868:20:10;;;;:35;;:37;;;;;;;;;;;10663:43;10868:20;:37;;;5:2:-1;;;;30:1;27;20:12;5:2;10868:37:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;10925:38:10;;;;;;;;;;-1:-1:-1;10925:38:10;;;;;;;-1:-1:-1;10925:38:10;10984:1;10977:8;;;;;;;;;;9056:3773;11018:27;11048:15;-1:-1:-1;;;;;11048:46:10;;:48;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11048:48:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11048:48:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11048:48:10;11137:20;;:42;;;-1:-1:-1;;;11137:42:10;;;;11048:48;;-1:-1:-1;11110:24:10;;-1:-1:-1;;;;;11137:20:10;;;;:40;;:42;;;;;11048:48;;11137:42;;;;;;;;:20;:42;;;5:2:-1;;;;30:1;27;20:12;5:2;11137:42:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11137:42:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11137:42:10;;-1:-1:-1;11502:22:10;11544:39;;;;;;:115;;;11604:20;;;;;;;;;-1:-1:-1;;;;;11604:20:10;-1:-1:-1;;;;;11604:41:10;;:43;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11604:43:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11604:43:10;;;;;;39:16:-1;36:1;17:17;2:54;101:4;11604:43:10;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:2;5:11;;2:2;;;29:1;26;19:12;2:2;11604:43:10;;;;;;;;;;;;;-1:-1:-1;;;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;-1:-1;;;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;373:25;;-1:-1;11604:43:10;;421:4:-1;412:14;;;;11604:43:10;;;;;412:14:-1;11604:43:10;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;11604:43:10;;;;;;;;;;;:50;11658:1;11604:55;11544:115;11502:157;;11678:17;11674:290;;;11756:20;;;;;;;;;-1:-1:-1;;;;;11756:20:10;-1:-1:-1;;;;;11756:36:10;;:38;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11756:38:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11756:38:10;;;;11674:290;;;11839:15;-1:-1:-1;;;;;11839:40:10;;:42;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11839:42:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11839:42:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;11839:42:10;11819:62;;11815:149;;11901:20;;;;;;;;;-1:-1:-1;;;;;11901:20:10;-1:-1:-1;;;;;11901:46:10;;:48;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;11901:48:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;11901:48:10;;;;11815:149;9056:3773;;;392:1:28;;8758:4077:10;;;:::o;584:97:28:-;649:14;:25;;-1:-1:-1;;;;;;649:25:28;-1:-1:-1;;;;;649:25:28;;;;;;;;;;584:97::o;3847:57:10:-;3902:2;3847:57;:::o;218:964:29:-;352:18;344:67;;;;-1:-1:-1;;;344:67:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;429:32:29;;421:81;;;;-1:-1:-1;;;421:81:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;520:9;512:64;;;;-1:-1:-1;;;512:64:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;594:36;;;;:21;:36;;;;;;;;-1:-1:-1;;;;;594:56:29;;;;;;;;;;:61;586:139;;;;-1:-1:-1;;;586:139:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;735:36;;;;:21;:36;;;;;;;;-1:-1:-1;;;;;735:56:29;;;;;;;;;794:9;735:68;;850:43;;;;;;;814:79;;;;;;;;;;;;;;;;;:33;;:79;;;850:43;814:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;814:79:29;;-1:-1:-1;907:6:29;;-1:-1:-1;;;;903:199:29;923:16;:23;919:1;:27;903:199;;;998:13;975:16;992:1;975:19;;;;;;;;;;;;;;:36;;967:124;;;;-1:-1:-1;;;967:124:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;948:3;;903:199;;;-1:-1:-1;;;;;;;1112:43:29;:23;:43;;;;;;;;;;27:10:-1;;39:1;23:18;;45:23;;1112:63:29;;;;;;;218:964::o;1098:218:28:-;1232:47;;;;:32;:47;;;;;;;;-1:-1:-1;;;;;1232:67:28;;;;;;;;;;:77;1098:218::o;3177:40:10:-;;;;:::o;1826:87::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;3409:43::-;;;-1:-1:-1;;;;;3409:43:10;;:::o;1157:76::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;13353:132::-;13433:20;;-1:-1:-1;;;;;13433:20:10;:45;;13353:132;:::o;3796:44::-;;;;:::o;655:161:11:-;4913:20:10;;;;;;;;;-1:-1:-1;;;;;4913:20:10;-1:-1:-1;;;;;4913:36:10;;:38;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4913:38:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;4913:38:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4913:38:10;-1:-1:-1;;;;;4891:61:10;:10;:61;4883:70;;;;;;769:40:11;791:12;805:3;769:21;:40::i;:::-;655:161;;:::o;13805:1934:10:-;14008:20;;:64;;;-1:-1:-1;;;14008:64:10;;-1:-1:-1;;;;;14008:64:10;;;;;;;;;13938:34;;13984:21;;14008:20;;:43;;:64;;;;;;;;;;;;;;:20;:64;;;5:2:-1;;;;30:1;27;20:12;5:2;14008:64:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14008:64:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14008:64:10;14128:20;;:38;;;-1:-1:-1;;;14128:38:10;;;;14008:64;;-1:-1:-1;14082:29:10;;-1:-1:-1;;;;;14128:20:10;;;;:36;;:38;;;;;14008:64;;14128:38;;;;;;;;:20;:38;;;5:2:-1;;;;30:1;27;20:12;5:2;14128:38:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14128:38:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14128:38:10;;-1:-1:-1;;;;;;14196:30:10;;;;;;;;;;14177:16;;;;14292:294;;14336:61;;;-1:-1:-1;;;14336:61:10;;-1:-1:-1;;;;;14336:61:10;;;;;;;;;;;;;;;;:31;;;;;;:61;;;;;;;;;;;;;;;:31;:61;;;5:2:-1;;;;30:1;27;20:12;5:2;14336:61:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14336:61:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14336:61:10;;-1:-1:-1;14415:15:10;14411:79;;-1:-1:-1;;14458:16:10;;;14472:1;14458:16;;;;;;;;;-1:-1:-1;14450:25:10;;-1:-1:-1;;;14450:25:10;14411:79;14515:60;;;-1:-1:-1;;;14515:60:10;;-1:-1:-1;;;;;14515:60:10;;;;;;;;;;;;;;;;:30;;;;;;:60;;;;;;;;;;;;;;;:30;:60;;;5:2:-1;;;;30:1;27;20:12;5:2;14515:60:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14515:60:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14515:60:10;;-1:-1:-1;14292:294:10;-1:-1:-1;;;;;14623:38:10;;14596:24;14623:38;;;;;;;;;;;;14688:13;;14735:21;;;;;;;;;;;;;;;;14623:38;14688:13;14712:20;;14688:13;14735:21;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;14735:21:10;-1:-1:-1;14712:44:10;-1:-1:-1;14766:17:10;;14817:766;14833:6;14829:1;:10;14817:766;;;14860:13;14876:6;14883:1;14876:9;;;;;;;;;;;;;;;;14860:25;;14903:11;14899:530;;;14946:10;14938:5;:18;14934:206;;;15113:8;;;14934:206;15174:5;15161:9;:18;;:36;;;;-1:-1:-1;15183:14:10;;;15161:36;15157:258;;;15391:5;;;15157:258;15447:15;-1:-1:-1;;;;;15447:30:10;;15478:19;15499:7;15508:5;15447:67;;;;;;;;;;;;;-1:-1:-1;;;;;15447:67:10;-1:-1:-1;;;;;15447:67:10;;;;;;-1:-1:-1;;;;;15447:67:10;-1:-1:-1;;;;;15447:67:10;;;;;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;15447:67:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;15447:67:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;15447:67:10;15442:131;;15553:5;15534:3;15538:11;;;;;;15534:16;;;;;;;;;;;;;:24;;;;;15442:131;14817:766;;14841:3;;14817:766;;;15627:9;15613:24;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;15613:24:10;;15593:44;;15656:1;15652:5;;15647:86;15663:9;15659:1;:13;15647:86;;;15716:3;15720:1;15716:6;;;;;;;;;;;;;;15693:17;15711:1;15693:20;;;;;;;;;;;;;;;;;:29;15674:3;;15647:86;;;13805:1934;;;;;;;;;;;;;;;:::o;16295:1436::-;16384:7;16403:29;16449:20;;;;;;;;;-1:-1:-1;;;;;16449:20:10;-1:-1:-1;;;;;16449:36:10;;:38;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;16449:38:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16449:38:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;16449:38:10;16521:30;;;-1:-1:-1;;;16521:30:10;;;;16449:38;;-1:-1:-1;16498:20:10;;-1:-1:-1;;;;;16521:28:10;;;;;:30;;;;;16449:38;;16521:30;;;;;;;:28;:30;;;5:2:-1;;;;30:1;27;20:12;5:2;16521:30:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16521:30:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;16521:30:10;;-1:-1:-1;16566:17:10;16562:142;;16692:1;16685:8;;;;;;16562:142;16738:20;;:60;;;-1:-1:-1;;;16738:60:10;;-1:-1:-1;;;;;16738:60:10;;;;;;;;;16714:21;;16738:20;;;;;:43;;:60;;;;;;;;;;;;;;;:20;:60;;;5:2:-1;;;;30:1;27;20:12;5:2;16738:60:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16738:60:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;16738:60:10;16813:20;;:56;;;-1:-1:-1;;;16813:56:10;;-1:-1:-1;;;;;16813:56:10;;;;;;;;;16738:60;;-1:-1:-1;16813:20:10;;;:41;;:56;;;;;16738:60;;16813:56;;;;;;;;:20;:56;;;5:2:-1;;;;30:1;27;20:12;5:2;16813:56:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16813:56:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;16813:56:10;16809:537;;;17142:46;;;;:32;:46;;;;;;;;-1:-1:-1;;;;;17142:61:10;;;;;;;;;;;;17221:42;;;:28;:42;;;;;:57;;;;;;;;;17080:255;;17112:12;;3969:7;17080:14;:255::i;:::-;17073:262;;;;;;;16809:537;17551:61;;;-1:-1:-1;;;17551:61:10;;-1:-1:-1;;;;;17551:61:10;;;;;;;;;;;;;;;17497:227;;17525:12;;17551:27;;;;;;:61;;;;;;;;;;;;;;;:27;:61;;;5:2:-1;;;;30:1;27;20:12;5:2;17551:61:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17551:61:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;17551:61:10;17626:49;;;-1:-1:-1;;;17626:49:10;;-1:-1:-1;;;;;17626:49:10;;;;;;;;;:32;;;;;;:49;;;;;17551:61;;17626:49;;;;;;;;:32;:49;;;5:2:-1;;;;30:1;27;20:12;5:2;17626:49:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;17626:49:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;17626:49:10;3969:7;17497:14;:227::i;:::-;17490:234;16295:1436;-1:-1:-1;;;;;16295:1436:10:o;2564:23::-;;;;:::o;18234:1005::-;18454:7;18477:21;;;:46;;-1:-1:-1;18502:21:10;;18477:46;:67;;;-1:-1:-1;18527:17:10;;18477:67;18473:106;;;-1:-1:-1;18567:1:10;18560:8;;18473:106;18588:13;;18642:32;;;;:70;;18711:1;18642:70;;;18692:16;18677:12;:31;18642:70;18722:27;18752:40;;;:25;:40;;;;;;18615:97;;-1:-1:-1;18855:38:10;;;18826:3;:25;;;18806:46;;:87;18802:409;;;19011:12;18992:16;18978:11;:30;:45;;;;;;18970:53;;18802:409;;;19177:16;19196:3;19177:22;19153:19;19147:3;:25;19127:16;19113:11;:30;:60;:87;;;;;;19105:95;;18802:409;-1:-1:-1;19227:5:10;;18234:1005;-1:-1:-1;;;;;;;18234:1005:10:o;1556:83::-;;;;;;;;;;;;;;;;;;;;;;;;:::o;2960:26::-;;;;:::o;19706:898::-;19892:7;19915:21;;;:42;;-1:-1:-1;19940:17:10;;19915:42;19911:81;;;-1:-1:-1;19980:1:10;19973:8;;19911:81;20001:13;;20055:32;;;;:70;;20124:1;20055:70;;;20105:16;20090:12;:31;20055:70;20135:27;20165:40;;;:25;:40;;;;;;20028:97;;-1:-1:-1;20268:38:10;;;20239:3;:25;;;20219:46;;:87;20215:361;;;20424:12;20405:16;20391:11;:30;:45;;;;;;20383:53;;20215:361;;;20562:3;20526:33;;;:39;20518:47;;20215:361;-1:-1:-1;20592:5:10;;-1:-1:-1;;19706:898:10;;;;;;;:::o;3603:42::-;;;;:::o;2772:37::-;;;;:::o;1335:40::-;;;;:::o;7239:94::-;7302:11;:24;;7317:9;7302:24;;;7239:94::o;6706:88::-;6766:8;:21;;6778:9;6766:21;;;6706:88::o;2502:559:11:-;2637:20;2694:47;;;:32;:47;;;;;;;;-1:-1:-1;;;;;2694:67:11;;;;;;;;;;;;2792:43;;;:28;:43;;;;;:63;;;;;;;;;2988:36;;;:21;:36;;;;;:56;;;;;;;;;;;2881:173;;2727:13;;2694:67;;2792:63;;2881:14;:173::i;5685:766:10:-;5769:8;:6;:8::i;:::-;-1:-1:-1;;;;;5755:22:10;:10;-1:-1:-1;;;;;5755:22:10;;:48;;;;5795:8;:6;:8::i;:::-;-1:-1:-1;;;;;5781:22:10;:9;-1:-1:-1;;;;;5781:22:10;;5755:48;:75;;;;5822:8;:6;:8::i;:::-;-1:-1:-1;;;;;5807:23:10;;5755:75;:96;;;-1:-1:-1;5834:12:10;:17;5755:96;5747:169;;;;-1:-1:-1;;;5747:169:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5935:15;:13;:15::i;:::-;5934:16;5926:65;;;;-1:-1:-1;;;5926:65:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6009:27:10;;6001:66;;;;;-1:-1:-1;;;6001:66:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;6077:20;:56;;-1:-1:-1;;;;;6077:56:10;;;-1:-1:-1;;;;;;6077:56:10;;;;;;:20;6143:28;;:25;:28;;3902:2;6143:28;:59;6238:4;6213:22;:29;;;6252:25;:32;6294:20;:65;;;;;6317:42;6294:65;;;;6077:56;6369:27;:31;6410:29;:34;5685:766::o;7989:200::-;255:8:40;:6;:8::i;:::-;-1:-1:-1;;;;;241:22:40;:10;-1:-1:-1;;;;;241:22:40;;233:78;;;;-1:-1:-1;;;233:78:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8093:11:10;8085:53;;;;;-1:-1:-1;;;8085:53:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;8148:25;:34;7989:200::o;7538:190::-;255:8:40;:6;:8::i;:::-;-1:-1:-1;;;;;241:22:40;:10;-1:-1:-1;;;;;241:22:40;;233:78;;;;-1:-1:-1;;;233:78:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7635:11:10;7627:53;;;;;-1:-1:-1;;;7627:53:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;7690:22;:31;7538:190::o;2391:60::-;;;;;;;;;;;;;:::o;687:158:28:-;787:40;;;;:25;:40;;;;;;:51;687:158::o;851:241::-;1011:74;1037:16;1055:13;1070:14;1011:25;:74::i;:::-;851:241;;;:::o;13085:169:10:-;-1:-1:-1;;;;;13208:39:10;;:23;:39;;;;;;;;;;;;13201:46;;;;;;;;;;;;;;;;;13173:16;;13201:46;;;13208:39;13201:46;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13085:169;;;:::o;3281:46::-;;;-1:-1:-1;;;;;3281:46:10;;:::o;1490:621:11:-;1658:20;1715:47;;;:32;:47;;;;;;;;-1:-1:-1;;;;;1715:67:11;;;;;;;;;;;;1813:43;;;:28;:43;;;;;:63;;;;;;;;;2038:36;;;:21;:36;;;;;:56;;;;;;;;;;;1902:202;;1748:13;;1957:15;;1715:67;;1813:63;;1902:14;:202::i;:::-;1887:217;1490:621;-1:-1:-1;;;;;;1490:621:11:o;3917:59:10:-;3969:7;3917:59;:::o;527:51:28:-;:::o;1443:110::-;1532:14;;-1:-1:-1;;;;;1532:14:28;1443:110;:::o;21076:3066:10:-;21152:7;21180:27;21210:20;;;;;;;;;-1:-1:-1;;;;;21210:20:10;-1:-1:-1;;;;;21210:34:10;;:36;;;;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21210:36:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;21210:36:10;;;;;;39:16:-1;36:1;17:17;2:54;101:4;21210:36:10;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:2;5:11;;2:2;;;29:1;26;19:12;2:2;21210:36:10;;;;;;;;;;;;;-1:-1:-1;;;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;219:3;213:10;331:9;325:2;311:12;307:21;289:16;285:44;282:59;-1:-1;;;247:12;244:29;233:116;230:2;;;362:1;359;352:12;230:2;373:25;;-1:-1;21210:36:10;;421:4:-1;412:14;;;;21210:36:10;;;;;412:14:-1;21210:36:10;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;-1:-1;;;;21210:36:10;;;;;;-1:-1:-1;;21281:17:10;;21180:66;;-1:-1:-1;;;21316:18:10;21308:51;;;;;-1:-1:-1;;;21308:51:10;;;;;;;;;;;;-1:-1:-1;;;21308:51:10;;;;;;;;;;;;;;;21370:21;21405:22;;21394:8;;:33;;;;;;21370:57;;21449:13;21437:8;;:25;;;;;;;;;;;21571:24;21612:25;;21598:11;;:39;;;;;21647:11;:31;;21598:39;;;;21647:31;;;;;;21746:25;;21598:39;;-1:-1:-1;21711:32:10;;;:60;21786:16;21782:55;;21825:1;21818:8;;;;;;;;;21782:55;22215:25;22287:29;;22257:27;;22243:11;:41;:73;;;;;22331:20;;:48;;22243:73;;;;;-1:-1:-1;;;;;;22331:20:10;;:48;;;;;22243:73;;22331:20;:48;:20;:48;22243:73;22331:20;:48;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22331:48:10;22390:26;22433:17;22419:11;:31;22390:60;;22546:33;22593:13;22582:25;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;136:17;;-1:-1;22582:25:10;-1:-1:-1;22546:61:10;-1:-1:-1;22674:29:10;;22714:352;22738:10;:17;22734:1;:21;22714:352;;;22798:20;;22837:13;;-1:-1:-1;;;;;22798:20:10;;;;:38;;22837:10;;22848:1;;22837:13;;;;;;;;;;;;22798:53;;;;;;;;;;;;;-1:-1:-1;;;;;22798:53:10;-1:-1:-1;;;;;22798:53:10;;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;22798:53:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;22798:53:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;22798:53:10;22797:54;:141;;;;;22871:32;:47;22904:13;22871:47;;;;;;;;;;;:62;22919:10;22930:1;22919:13;;;;;;;;;;;;;;-1:-1:-1;;;;;22871:62:10;-1:-1:-1;;;;;22871:62:10;;;;;;;;;;;;;22937:1;22871:67;;22797:141;22776:280;;;22996:4;22971:19;22991:1;22971:22;;;;;;;;:29;;;:22;;;;;;;;;;;:29;23018:23;;;;;22776:280;22757:3;;22714:352;;;-1:-1:-1;23128:26:10;23124:64;;23176:1;23169:8;;;;;;;;;;;;;23124:64;23256:18;23298:21;23277:18;:42;;;;;;;-1:-1:-1;23334:15:10;;23330:692;;23370:9;23365:647;23389:13;23385:1;:17;23365:647;;;23431:19;23451:1;23431:22;;;;;;;;;;;;;;23427:571;;;23560:21;:36;23582:13;23560:36;;;;;;;;;;;:51;23597:10;23608:1;23597:13;;;;;;;;;;;;;;-1:-1:-1;;;;;23560:51:10;-1:-1:-1;;;;;23560:51:10;;;;;;;;;;;;;23615:1;23560:56;23552:186;;;;-1:-1:-1;;;23552:186:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23760:36;;;;:21;:36;;;;;23797:13;;23814:10;;23760:36;23797:10;;23808:1;;23797:13;;;;;;;;;;;;-1:-1:-1;;;;;23760:51:10;-1:-1:-1;;;;;23760:51:10;;;;;;;;;;;;:64;;;;23888:10;23867:31;;;;23921:23;:38;23945:10;23956:1;23945:13;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;23921:38:10;;;;;;;;;;;;-1:-1:-1;23921:38:10;;;27:10:-1;;39:1;23:18;;45:23;;23921:58:10;;;;;;;;;;23427:571;23404:3;;23365:647;;;;23330:692;-1:-1:-1;;;;24060:31:10;;;;24032:25;:59;24060:31;21076:3066;-1:-1:-1;;;;;;21076:3066:10:o;24504:742::-;24675:43;;;;:28;:43;;;;;;;;-1:-1:-1;;;;;24675:59:10;;;;;;;;;;:64;24671:101;;24755:7;;24671:101;24806:20;;:59;;;-1:-1:-1;;;24806:59:10;;-1:-1:-1;;;;;24806:59:10;;;;;;;;;24781:22;;24806:20;;;;;:43;;:59;;;;;;;;;;;;;;;:20;:59;;;5:2:-1;;;;30:1;27;20:12;5:2;24806:59:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;24806:59:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;24806:59:10;24897:49;;;-1:-1:-1;;;24897:49:10;;-1:-1:-1;;;;;24897:49:10;;;;;;;;;24806:59;;-1:-1:-1;24875:19:10;;24897:33;;;;;;:49;;;;;24806:59;;24897:49;;;;;;;;:33;:49;;;5:2:-1;;;;30:1;27;20:12;5:2;24897:49:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;24897:49:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;24897:49:10;;-1:-1:-1;24960:16:10;24956:53;;24992:7;;;;24956:53;25018:43;;;;:28;:43;;;;;;;;-1:-1:-1;;;;;25018:59:10;;;;;;;;;;;;:73;;;25179:60;;-1:-1:-1;;;25179:60:10;;;;;;;;;;;;;;;;;:28;;;;;;:60;;;;;25018:43;;25179:60;;;;;;:28;:60;;;5:2:-1;;;;30:1;27;20:12;5:2;25179:60:10;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;25179:60:10;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;25179:60:10;25101:47;;;;:32;25179:60;25101:47;;;;;;;-1:-1:-1;;;;;25101:63:10;;;;;;;;;:138;-1:-1:-1;;24504:742:10;;;:::o;25580:436::-;25676:12;;;;;:34;;-1:-1:-1;25693:17:10;;-1:-1:-1;;;;;25693:8:10;;;:17;;;;;25702:7;;25693:17;;;;25702:7;25693:8;:17;;;;;;;25692:18;25676:34;25672:338;;;25986:7;25995:3;25964:35;;;;;:::i;:::-;-1:-1:-1;;;;;25964:35:10;;;;;;;;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;-1:-1;;;25580:436:10;;:::o;370:168:38:-;250:66;511:11;;490:42::o;126:1058:29:-;;;;;;;;:::o",
  "source": "pragma solidity ^0.5.16;\n\nimport './BlockRewardHbbftBaseMock.sol';\nimport '../../contracts/base/BlockRewardHbbftCoins.sol';\n\n\ncontract BlockRewardHbbftCoinsMock is BlockRewardHbbftCoins, BlockRewardHbbftBaseMock {\n    function setEpochPoolReward(\n        uint256 _stakingEpoch,\n        address _poolMiningAddress\n    ) public payable {\n        require(_stakingEpoch != 0, \"SetEpochPoolReward: epoch can't be 0\");\n        require(_poolMiningAddress != address(0), \"SetEpochPoolReward: epoch can't be 0\");\n        require(msg.value != 0, \"SetEpochPoolReward: reward can't be 0\");\n        require(epochPoolNativeReward[_stakingEpoch][_poolMiningAddress] == 0,\n            \"SetEpochPoolReward: epochPoolNativeReward already set\");\n        epochPoolNativeReward[_stakingEpoch][_poolMiningAddress] = msg.value;\n\n        uint256[] memory thisPoolsRewards = _epochsPoolGotRewardFor[_poolMiningAddress];\n        for(uint i = 0; i < thisPoolsRewards.length; i++) {\n            require(thisPoolsRewards[i] != _stakingEpoch, \n                \"There is already a Reward pending for this mining address!\");\n        }\n\n        _epochsPoolGotRewardFor[_poolMiningAddress].push(_stakingEpoch);\n    }\n}\n",
  "sourcePath": "/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/mockContracts/BlockRewardHbbftCoinsMock.sol",
  "ast": {
    "absolutePath": "/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/mockContracts/BlockRewardHbbftCoinsMock.sol",
    "exportedSymbols": {
      "BlockRewardHbbftCoinsMock": [
        10828
      ]
    },
    "id": 10829,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10732,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".16"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:29"
      },
      {
        "absolutePath": "/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/mockContracts/BlockRewardHbbftBaseMock.sol",
        "file": "./BlockRewardHbbftBaseMock.sol",
        "id": 10733,
        "nodeType": "ImportDirective",
        "scope": 10829,
        "sourceUnit": 10731,
        "src": "26:40:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/base/BlockRewardHbbftCoins.sol",
        "file": "../../contracts/base/BlockRewardHbbftCoins.sol",
        "id": 10734,
        "nodeType": "ImportDirective",
        "scope": 10829,
        "sourceUnit": 6341,
        "src": "67:56:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10735,
              "name": "BlockRewardHbbftCoins",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6340,
              "src": "164:21:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BlockRewardHbbftCoins_$6340",
                "typeString": "contract BlockRewardHbbftCoins"
              }
            },
            "id": 10736,
            "nodeType": "InheritanceSpecifier",
            "src": "164:21:29"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10737,
              "name": "BlockRewardHbbftBaseMock",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10730,
              "src": "187:24:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BlockRewardHbbftBaseMock_$10730",
                "typeString": "contract BlockRewardHbbftBaseMock"
              }
            },
            "id": 10738,
            "nodeType": "InheritanceSpecifier",
            "src": "187:24:29"
          }
        ],
        "contractDependencies": [
          6235,
          6340,
          9883,
          9913,
          10730,
          11448,
          11516
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 10828,
        "linearizedBaseContracts": [
          10828,
          10730,
          6340,
          9913,
          6235,
          9883,
          11516,
          11448
        ],
        "name": "BlockRewardHbbftCoinsMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 10826,
              "nodeType": "Block",
              "src": "334:848:29",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 10748,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 10746,
                          "name": "_stakingEpoch",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10740,
                          "src": "352:13:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 10747,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "369:1:29",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "352:18:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "53657445706f6368506f6f6c5265776172643a2065706f63682063616e27742062652030",
                        "id": 10749,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "372:38:29",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e2201801dcecd3a19c5faad71b6a32f17960a7f2584017d56af9a591b22bb399",
                          "typeString": "literal_string \"SetEpochPoolReward: epoch can't be 0\""
                        },
                        "value": "SetEpochPoolReward: epoch can't be 0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e2201801dcecd3a19c5faad71b6a32f17960a7f2584017d56af9a591b22bb399",
                          "typeString": "literal_string \"SetEpochPoolReward: epoch can't be 0\""
                        }
                      ],
                      "id": 10745,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11534,
                        11535
                      ],
                      "referencedDeclaration": 11535,
                      "src": "344:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10750,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "344:67:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10751,
                  "nodeType": "ExpressionStatement",
                  "src": "344:67:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 10757,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 10753,
                          "name": "_poolMiningAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10742,
                          "src": "429:18:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 10755,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "459:1:29",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 10754,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "451:7:29",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 10756,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "451:10:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "429:32:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "53657445706f6368506f6f6c5265776172643a2065706f63682063616e27742062652030",
                        "id": 10758,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "463:38:29",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e2201801dcecd3a19c5faad71b6a32f17960a7f2584017d56af9a591b22bb399",
                          "typeString": "literal_string \"SetEpochPoolReward: epoch can't be 0\""
                        },
                        "value": "SetEpochPoolReward: epoch can't be 0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e2201801dcecd3a19c5faad71b6a32f17960a7f2584017d56af9a591b22bb399",
                          "typeString": "literal_string \"SetEpochPoolReward: epoch can't be 0\""
                        }
                      ],
                      "id": 10752,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11534,
                        11535
                      ],
                      "referencedDeclaration": 11535,
                      "src": "421:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10759,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "421:81:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10760,
                  "nodeType": "ExpressionStatement",
                  "src": "421:81:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 10765,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 10762,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11531,
                            "src": "520:3:29",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 10763,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "520:9:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 10764,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "533:1:29",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "520:14:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "53657445706f6368506f6f6c5265776172643a207265776172642063616e27742062652030",
                        "id": 10766,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "536:39:29",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_43b8093bddc65ef860b20f41275c67a68f6e5ae8fb4b641f69c73dfbad9722fa",
                          "typeString": "literal_string \"SetEpochPoolReward: reward can't be 0\""
                        },
                        "value": "SetEpochPoolReward: reward can't be 0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_43b8093bddc65ef860b20f41275c67a68f6e5ae8fb4b641f69c73dfbad9722fa",
                          "typeString": "literal_string \"SetEpochPoolReward: reward can't be 0\""
                        }
                      ],
                      "id": 10761,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11534,
                        11535
                      ],
                      "referencedDeclaration": 11535,
                      "src": "512:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10767,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "512:64:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10768,
                  "nodeType": "ExpressionStatement",
                  "src": "512:64:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 10776,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 10770,
                              "name": "epochPoolNativeReward",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5076,
                              "src": "594:21:29",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(uint256 => mapping(address => uint256))"
                              }
                            },
                            "id": 10772,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 10771,
                              "name": "_stakingEpoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10740,
                              "src": "616:13:29",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "594:36:29",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 10774,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 10773,
                            "name": "_poolMiningAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10742,
                            "src": "631:18:29",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "594:56:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 10775,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "654:1:29",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "594:61:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "53657445706f6368506f6f6c5265776172643a2065706f6368506f6f6c4e617469766552657761726420616c726561647920736574",
                        "id": 10777,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "669:55:29",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_19d6d76bf35d5270abb16ad1a156055bad7fc987b49957a12f87e79d2da57bd5",
                          "typeString": "literal_string \"SetEpochPoolReward: epochPoolNativeReward already set\""
                        },
                        "value": "SetEpochPoolReward: epochPoolNativeReward already set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_19d6d76bf35d5270abb16ad1a156055bad7fc987b49957a12f87e79d2da57bd5",
                          "typeString": "literal_string \"SetEpochPoolReward: epochPoolNativeReward already set\""
                        }
                      ],
                      "id": 10769,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11534,
                        11535
                      ],
                      "referencedDeclaration": 11535,
                      "src": "586:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10778,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "586:139:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10779,
                  "nodeType": "ExpressionStatement",
                  "src": "586:139:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10787,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 10780,
                          "name": "epochPoolNativeReward",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5076,
                          "src": "735:21:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(uint256 => mapping(address => uint256))"
                          }
                        },
                        "id": 10783,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 10781,
                          "name": "_stakingEpoch",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10740,
                          "src": "757:13:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "735:36:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 10784,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 10782,
                        "name": "_poolMiningAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10742,
                        "src": "772:18:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "735:56:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 10785,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11531,
                        "src": "794:3:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 10786,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "794:9:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "735:68:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10788,
                  "nodeType": "ExpressionStatement",
                  "src": "735:68:29"
                },
                {
                  "assignments": [
                    10792
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 10792,
                      "name": "thisPoolsRewards",
                      "nodeType": "VariableDeclaration",
                      "scope": 10826,
                      "src": "814:33:29",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 10790,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "814:7:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 10791,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "814:9:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 10796,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 10793,
                      "name": "_epochsPoolGotRewardFor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5070,
                      "src": "850:23:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
                        "typeString": "mapping(address => uint256[] storage ref)"
                      }
                    },
                    "id": 10795,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 10794,
                      "name": "_poolMiningAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10742,
                      "src": "874:18:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "850:43:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                      "typeString": "uint256[] storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "814:79:29"
                },
                {
                  "body": {
                    "id": 10817,
                    "nodeType": "Block",
                    "src": "953:149:29",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 10813,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 10809,
                                  "name": "thisPoolsRewards",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 10792,
                                  "src": "975:16:29",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                    "typeString": "uint256[] memory"
                                  }
                                },
                                "id": 10811,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 10810,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 10798,
                                  "src": "992:1:29",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "975:19:29",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 10812,
                                "name": "_stakingEpoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10740,
                                "src": "998:13:29",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "975:36:29",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "546865726520697320616c72656164792061205265776172642070656e64696e6720666f722074686973206d696e696e67206164647265737321",
                              "id": 10814,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1030:60:29",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e0b744ee225b07b292d092b45a4303988405ed7ccc28b6a2cea2e46254d337df",
                                "typeString": "literal_string \"There is already a Reward pending for this mining address!\""
                              },
                              "value": "There is already a Reward pending for this mining address!"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_e0b744ee225b07b292d092b45a4303988405ed7ccc28b6a2cea2e46254d337df",
                                "typeString": "literal_string \"There is already a Reward pending for this mining address!\""
                              }
                            ],
                            "id": 10808,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              11534,
                              11535
                            ],
                            "referencedDeclaration": 11535,
                            "src": "967:7:29",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 10815,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "967:124:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 10816,
                        "nodeType": "ExpressionStatement",
                        "src": "967:124:29"
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 10804,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 10801,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10798,
                      "src": "919:1:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 10802,
                        "name": "thisPoolsRewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10792,
                        "src": "923:16:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      "id": 10803,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "923:23:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "919:27:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 10818,
                  "initializationExpression": {
                    "assignments": [
                      10798
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 10798,
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "scope": 10818,
                        "src": "907:6:29",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 10797,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "907:4:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 10800,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 10799,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "916:1:29",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "907:10:29"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 10806,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "948:3:29",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 10805,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10798,
                        "src": "948:1:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 10807,
                    "nodeType": "ExpressionStatement",
                    "src": "948:3:29"
                  },
                  "nodeType": "ForStatement",
                  "src": "903:199:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10823,
                        "name": "_stakingEpoch",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10740,
                        "src": "1161:13:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 10819,
                          "name": "_epochsPoolGotRewardFor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5070,
                          "src": "1112:23:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
                            "typeString": "mapping(address => uint256[] storage ref)"
                          }
                        },
                        "id": 10821,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 10820,
                          "name": "_poolMiningAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10742,
                          "src": "1136:18:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1112:43:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 10822,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1112:48:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) returns (uint256)"
                      }
                    },
                    "id": 10824,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1112:63:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10825,
                  "nodeType": "ExpressionStatement",
                  "src": "1112:63:29"
                }
              ]
            },
            "documentation": null,
            "id": 10827,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setEpochPoolReward",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10743,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10740,
                  "name": "_stakingEpoch",
                  "nodeType": "VariableDeclaration",
                  "scope": 10827,
                  "src": "255:21:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10739,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "255:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10742,
                  "name": "_poolMiningAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 10827,
                  "src": "286:26:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10741,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "286:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "245:73:29"
            },
            "returnParameters": {
              "id": 10744,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "334:0:29"
            },
            "scope": 10828,
            "src": "218:964:29",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 10829,
        "src": "126:1058:29"
      }
    ],
    "src": "0:1185:29"
  },
  "legacyAST": {
    "absolutePath": "/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/mockContracts/BlockRewardHbbftCoinsMock.sol",
    "exportedSymbols": {
      "BlockRewardHbbftCoinsMock": [
        10828
      ]
    },
    "id": 10829,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10732,
        "literals": [
          "solidity",
          "^",
          "0.5",
          ".16"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:29"
      },
      {
        "absolutePath": "/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/mockContracts/BlockRewardHbbftBaseMock.sol",
        "file": "./BlockRewardHbbftBaseMock.sol",
        "id": 10733,
        "nodeType": "ImportDirective",
        "scope": 10829,
        "sourceUnit": 10731,
        "src": "26:40:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/sn/dmd/dmd-meta/hbbft-posdao-contracts/contracts/base/BlockRewardHbbftCoins.sol",
        "file": "../../contracts/base/BlockRewardHbbftCoins.sol",
        "id": 10734,
        "nodeType": "ImportDirective",
        "scope": 10829,
        "sourceUnit": 6341,
        "src": "67:56:29",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10735,
              "name": "BlockRewardHbbftCoins",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 6340,
              "src": "164:21:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BlockRewardHbbftCoins_$6340",
                "typeString": "contract BlockRewardHbbftCoins"
              }
            },
            "id": 10736,
            "nodeType": "InheritanceSpecifier",
            "src": "164:21:29"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 10737,
              "name": "BlockRewardHbbftBaseMock",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 10730,
              "src": "187:24:29",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_BlockRewardHbbftBaseMock_$10730",
                "typeString": "contract BlockRewardHbbftBaseMock"
              }
            },
            "id": 10738,
            "nodeType": "InheritanceSpecifier",
            "src": "187:24:29"
          }
        ],
        "contractDependencies": [
          6235,
          6340,
          9883,
          9913,
          10730,
          11448,
          11516
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 10828,
        "linearizedBaseContracts": [
          10828,
          10730,
          6340,
          9913,
          6235,
          9883,
          11516,
          11448
        ],
        "name": "BlockRewardHbbftCoinsMock",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 10826,
              "nodeType": "Block",
              "src": "334:848:29",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 10748,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 10746,
                          "name": "_stakingEpoch",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10740,
                          "src": "352:13:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 10747,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "369:1:29",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "352:18:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "53657445706f6368506f6f6c5265776172643a2065706f63682063616e27742062652030",
                        "id": 10749,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "372:38:29",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e2201801dcecd3a19c5faad71b6a32f17960a7f2584017d56af9a591b22bb399",
                          "typeString": "literal_string \"SetEpochPoolReward: epoch can't be 0\""
                        },
                        "value": "SetEpochPoolReward: epoch can't be 0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e2201801dcecd3a19c5faad71b6a32f17960a7f2584017d56af9a591b22bb399",
                          "typeString": "literal_string \"SetEpochPoolReward: epoch can't be 0\""
                        }
                      ],
                      "id": 10745,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11534,
                        11535
                      ],
                      "referencedDeclaration": 11535,
                      "src": "344:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10750,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "344:67:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10751,
                  "nodeType": "ExpressionStatement",
                  "src": "344:67:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 10757,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 10753,
                          "name": "_poolMiningAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10742,
                          "src": "429:18:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 10755,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "459:1:29",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 10754,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "451:7:29",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 10756,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "451:10:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "src": "429:32:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "53657445706f6368506f6f6c5265776172643a2065706f63682063616e27742062652030",
                        "id": 10758,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "463:38:29",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_e2201801dcecd3a19c5faad71b6a32f17960a7f2584017d56af9a591b22bb399",
                          "typeString": "literal_string \"SetEpochPoolReward: epoch can't be 0\""
                        },
                        "value": "SetEpochPoolReward: epoch can't be 0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_e2201801dcecd3a19c5faad71b6a32f17960a7f2584017d56af9a591b22bb399",
                          "typeString": "literal_string \"SetEpochPoolReward: epoch can't be 0\""
                        }
                      ],
                      "id": 10752,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11534,
                        11535
                      ],
                      "referencedDeclaration": 11535,
                      "src": "421:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10759,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "421:81:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10760,
                  "nodeType": "ExpressionStatement",
                  "src": "421:81:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 10765,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 10762,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11531,
                            "src": "520:3:29",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 10763,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "520:9:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 10764,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "533:1:29",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "520:14:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "53657445706f6368506f6f6c5265776172643a207265776172642063616e27742062652030",
                        "id": 10766,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "536:39:29",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_43b8093bddc65ef860b20f41275c67a68f6e5ae8fb4b641f69c73dfbad9722fa",
                          "typeString": "literal_string \"SetEpochPoolReward: reward can't be 0\""
                        },
                        "value": "SetEpochPoolReward: reward can't be 0"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_43b8093bddc65ef860b20f41275c67a68f6e5ae8fb4b641f69c73dfbad9722fa",
                          "typeString": "literal_string \"SetEpochPoolReward: reward can't be 0\""
                        }
                      ],
                      "id": 10761,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11534,
                        11535
                      ],
                      "referencedDeclaration": 11535,
                      "src": "512:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10767,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "512:64:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10768,
                  "nodeType": "ExpressionStatement",
                  "src": "512:64:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 10776,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 10770,
                              "name": "epochPoolNativeReward",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 5076,
                              "src": "594:21:29",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(uint256 => mapping(address => uint256))"
                              }
                            },
                            "id": 10772,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 10771,
                              "name": "_stakingEpoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 10740,
                              "src": "616:13:29",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "594:36:29",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 10774,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 10773,
                            "name": "_poolMiningAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 10742,
                            "src": "631:18:29",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "594:56:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 10775,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "654:1:29",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "594:61:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "53657445706f6368506f6f6c5265776172643a2065706f6368506f6f6c4e617469766552657761726420616c726561647920736574",
                        "id": 10777,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "669:55:29",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_19d6d76bf35d5270abb16ad1a156055bad7fc987b49957a12f87e79d2da57bd5",
                          "typeString": "literal_string \"SetEpochPoolReward: epochPoolNativeReward already set\""
                        },
                        "value": "SetEpochPoolReward: epochPoolNativeReward already set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_19d6d76bf35d5270abb16ad1a156055bad7fc987b49957a12f87e79d2da57bd5",
                          "typeString": "literal_string \"SetEpochPoolReward: epochPoolNativeReward already set\""
                        }
                      ],
                      "id": 10769,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        11534,
                        11535
                      ],
                      "referencedDeclaration": 11535,
                      "src": "586:7:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 10778,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "586:139:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10779,
                  "nodeType": "ExpressionStatement",
                  "src": "586:139:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 10787,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "baseExpression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 10780,
                          "name": "epochPoolNativeReward",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5076,
                          "src": "735:21:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$",
                            "typeString": "mapping(uint256 => mapping(address => uint256))"
                          }
                        },
                        "id": 10783,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 10781,
                          "name": "_stakingEpoch",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10740,
                          "src": "757:13:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "735:36:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 10784,
                      "indexExpression": {
                        "argumentTypes": null,
                        "id": 10782,
                        "name": "_poolMiningAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10742,
                        "src": "772:18:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "735:56:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 10785,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 11531,
                        "src": "794:3:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 10786,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "794:9:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "735:68:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10788,
                  "nodeType": "ExpressionStatement",
                  "src": "735:68:29"
                },
                {
                  "assignments": [
                    10792
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 10792,
                      "name": "thisPoolsRewards",
                      "nodeType": "VariableDeclaration",
                      "scope": 10826,
                      "src": "814:33:29",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[]"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 10790,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "814:7:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 10791,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "814:9:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[]"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "id": 10796,
                  "initialValue": {
                    "argumentTypes": null,
                    "baseExpression": {
                      "argumentTypes": null,
                      "id": 10793,
                      "name": "_epochsPoolGotRewardFor",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 5070,
                      "src": "850:23:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
                        "typeString": "mapping(address => uint256[] storage ref)"
                      }
                    },
                    "id": 10795,
                    "indexExpression": {
                      "argumentTypes": null,
                      "id": 10794,
                      "name": "_poolMiningAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10742,
                      "src": "874:18:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "850:43:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                      "typeString": "uint256[] storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "814:79:29"
                },
                {
                  "body": {
                    "id": 10817,
                    "nodeType": "Block",
                    "src": "953:149:29",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 10813,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 10809,
                                  "name": "thisPoolsRewards",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 10792,
                                  "src": "975:16:29",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                    "typeString": "uint256[] memory"
                                  }
                                },
                                "id": 10811,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 10810,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 10798,
                                  "src": "992:1:29",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "975:19:29",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 10812,
                                "name": "_stakingEpoch",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 10740,
                                "src": "998:13:29",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "975:36:29",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "hexValue": "546865726520697320616c72656164792061205265776172642070656e64696e6720666f722074686973206d696e696e67206164647265737321",
                              "id": 10814,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "string",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1030:60:29",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_stringliteral_e0b744ee225b07b292d092b45a4303988405ed7ccc28b6a2cea2e46254d337df",
                                "typeString": "literal_string \"There is already a Reward pending for this mining address!\""
                              },
                              "value": "There is already a Reward pending for this mining address!"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              {
                                "typeIdentifier": "t_stringliteral_e0b744ee225b07b292d092b45a4303988405ed7ccc28b6a2cea2e46254d337df",
                                "typeString": "literal_string \"There is already a Reward pending for this mining address!\""
                              }
                            ],
                            "id": 10808,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [
                              11534,
                              11535
                            ],
                            "referencedDeclaration": 11535,
                            "src": "967:7:29",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                              "typeString": "function (bool,string memory) pure"
                            }
                          },
                          "id": 10815,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "967:124:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 10816,
                        "nodeType": "ExpressionStatement",
                        "src": "967:124:29"
                      }
                    ]
                  },
                  "condition": {
                    "argumentTypes": null,
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 10804,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "argumentTypes": null,
                      "id": 10801,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 10798,
                      "src": "919:1:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "argumentTypes": null,
                      "expression": {
                        "argumentTypes": null,
                        "id": 10802,
                        "name": "thisPoolsRewards",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10792,
                        "src": "923:16:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      },
                      "id": 10803,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "923:23:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "919:27:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 10818,
                  "initializationExpression": {
                    "assignments": [
                      10798
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 10798,
                        "name": "i",
                        "nodeType": "VariableDeclaration",
                        "scope": 10818,
                        "src": "907:6:29",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 10797,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "907:4:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "id": 10800,
                    "initialValue": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 10799,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "916:1:29",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "907:10:29"
                  },
                  "loopExpression": {
                    "expression": {
                      "argumentTypes": null,
                      "id": 10806,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "948:3:29",
                      "subExpression": {
                        "argumentTypes": null,
                        "id": 10805,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10798,
                        "src": "948:1:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 10807,
                    "nodeType": "ExpressionStatement",
                    "src": "948:3:29"
                  },
                  "nodeType": "ForStatement",
                  "src": "903:199:29"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 10823,
                        "name": "_stakingEpoch",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10740,
                        "src": "1161:13:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 10819,
                          "name": "_epochsPoolGotRewardFor",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 5070,
                          "src": "1112:23:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_array$_t_uint256_$dyn_storage_$",
                            "typeString": "mapping(address => uint256[] storage ref)"
                          }
                        },
                        "id": 10821,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 10820,
                          "name": "_poolMiningAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10742,
                          "src": "1136:18:29",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1112:43:29",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                          "typeString": "uint256[] storage ref"
                        }
                      },
                      "id": 10822,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": null,
                      "src": "1112:48:29",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_uint256_$returns$_t_uint256_$",
                        "typeString": "function (uint256) returns (uint256)"
                      }
                    },
                    "id": 10824,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1112:63:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 10825,
                  "nodeType": "ExpressionStatement",
                  "src": "1112:63:29"
                }
              ]
            },
            "documentation": null,
            "id": 10827,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setEpochPoolReward",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10743,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10740,
                  "name": "_stakingEpoch",
                  "nodeType": "VariableDeclaration",
                  "scope": 10827,
                  "src": "255:21:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10739,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "255:7:29",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10742,
                  "name": "_poolMiningAddress",
                  "nodeType": "VariableDeclaration",
                  "scope": 10827,
                  "src": "286:26:29",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10741,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "286:7:29",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "245:73:29"
            },
            "returnParameters": {
              "id": 10744,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "334:0:29"
            },
            "scope": 10828,
            "src": "218:964:29",
            "stateMutability": "payable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 10829,
        "src": "126:1058:29"
      }
    ],
    "src": "0:1185:29"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.17+commit.d19bba13.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.1",
  "updatedAt": "2022-01-07T23:00:13.459Z",
  "devdoc": {
    "methods": {
      "addToDeltaPot()": {
        "details": "adds the transfered value to the delta pot. everyone is allowed to pile up the delta pot. however, circulating coins should be added to the reinsert pot, since the reinsert pot is designed for circulating coins."
      },
      "addToReinsertPot()": {
        "details": "adds the transfered value to the reinsert pot. everyone is allowed to pile up the resinsert pot, the reinsert pot reinserts coins back into the payout cycle. this is used by smart contracts of the ecosystem, DAO decisions to fund the reinsert pot from the DAO Pool and manual by hand. There is no permission check,  everyone is welcomed to pile up the reinsert pot."
      },
      "delegatorShare(uint256,uint256,uint256,uint256,uint256)": {
        "details": "Calculates delegator's share for the given pool reward amount and the specified staking epoch. Used by the `StakingHbbft.claimReward` function.",
        "params": {
          "_delegatorStaked": "The amount staked by a delegator.",
          "_poolReward": "The value of pool reward.",
          "_stakingEpoch": "The number of staking epoch.",
          "_totalStaked": "The total amount staked by a validator and their delegators.",
          "_validatorStaked": "The amount staked by a validator."
        }
      },
      "epochsPoolGotRewardFor(address)": {
        "details": "Returns an array of epoch numbers for which the specified pool (mining address) got a non-zero reward."
      },
      "epochsToClaimRewardFrom(address,address)": {
        "details": "Returns an array of epoch numbers for which the specified staker can claim a reward from the specified pool by the `StakingHbbft.claimReward` function.",
        "params": {
          "_poolStakingAddress": "The pool staking address.",
          "_staker": "The staker's address (delegator or candidate/validator)."
        }
      },
      "getDelegatorReward(uint256,uint256,address)": {
        "details": "Returns the reward amount in native coins for some delegator with the specified stake amount placed into the specified pool before the specified staking epoch. Used by the `StakingHbbft.claimReward` function.",
        "params": {
          "_delegatorStake": "The stake amount placed by some delegator into the `_poolMiningAddress` pool.",
          "_poolMiningAddress": "The pool mining address.",
          "_stakingEpoch": "The serial number of staking epoch."
        },
        "return": "`uint256 nativeReward` - the reward amount in native coins."
      },
      "getValidatorReward(uint256,address)": {
        "details": "Returns the reward amount in native coins for the specified validator and for the specified staking epoch. Used by the `StakingHbbft.claimReward` function.",
        "params": {
          "_poolMiningAddress": "The pool mining address.",
          "_stakingEpoch": "The serial number of staking epoch."
        },
        "return": "`uint256 nativeReward` - the reward amount in native coins."
      },
      "initialize(address)": {
        "details": "Initializes the contract at network startup. Can only be called by the constructor of the `InitializerHbbft` contract or owner.",
        "params": {
          "_validatorSet": "The address of the `ValidatorSetHbbft` contract."
        }
      },
      "isInitialized()": {
        "details": "Returns a boolean flag indicating if the `initialize` function has been called."
      },
      "reward(bool)": {
        "details": "Called by the engine when producing and closing a block, see https://wiki.parity.io/Block-Reward-Contract.html. This function performs all of the automatic operations needed for accumulating block producing statistics, starting a new staking epoch, snapshotting staking amounts for the upcoming staking epoch, and rewards distributing at the end of a staking epoch.",
        "params": {
          "_isEpochEndBlock": "Indicates if this is the last block of the current epoch i.e. just before the pending validators are finalized."
        }
      },
      "setReinsertPotPayoutFraction(uint256)": {
        "details": "set the reinsert pot payout fraction. every epoch, a fraction of the reinsert pot is payed out. (same logic than in the reinsert pot.) Only theOwner, the DAO is allowed to set the reinsert pot payout fraction."
      },
      "setdeltaPotPayoutFraction(uint256)": {
        "details": "set the delta pot payout fraction. every epoch, a fraction of the delta pot is payed out. Only theOwner, the DAO is allowed to set the delta pot payout fraction."
      },
      "transferReward(uint256,address)": {
        "details": "Called by the `StakingHbbft.claimReward` function to transfer native coins from the balance of the `BlockRewardHbbft` contract to the specified address as a reward.",
        "params": {
          "_nativeCoins": "The amount of native coins to transfer as a reward.",
          "_to": "The target address to transfer the amounts to."
        }
      },
      "validatorRewardPercent(address)": {
        "details": "Returns the reward coefficient for the specified validator. The given value should be divided by 10000 to get the value of the reward percent (since EVM doesn't support floating values). If the specified staking address is an address of a candidate that is not about to be a validator in the upcoming staking epoch the potentially possible reward coefficient is returned.",
        "params": {
          "_stakingAddress": "The staking address of the validator/candidate pool for which the getter must return the coefficient."
        }
      },
      "validatorShare(uint256,uint256,uint256,uint256)": {
        "details": "Calculates validator's share for the given pool reward amount and the specified staking epoch. Used by the `validatorRewardPercent` and `StakingHbbft.claimReward` functions.",
        "params": {
          "_poolReward": "The value of pool reward.",
          "_stakingEpoch": "The number of staking epoch.",
          "_totalStaked": "The total amount staked by a validator and their delegators.",
          "_validatorStaked": "The amount staked by a validator."
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}