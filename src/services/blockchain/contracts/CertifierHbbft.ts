/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../types/contracts";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Confirmed = ContractEventLog<{
  who: string;
  0: string;
}>;
export type Revoked = ContractEventLog<{
  who: string;
  0: string;
}>;

export interface CertifierHbbft extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): CertifierHbbft;
  clone(): CertifierHbbft;
  methods: {
    certified(_who: string): NonPayableTransactionObject<boolean>;

    certifiedExplicitly(_who: string): NonPayableTransactionObject<boolean>;

    certify(_who: string): NonPayableTransactionObject<void>;

    initialize(
      _certifiedAddresses: string[],
      _validatorSet: string
    ): NonPayableTransactionObject<void>;

    isInitialized(): NonPayableTransactionObject<boolean>;

    revoke(_who: string): NonPayableTransactionObject<void>;

    validatorSetContract(): NonPayableTransactionObject<string>;
  };
  events: {
    Confirmed(cb?: Callback<Confirmed>): EventEmitter;
    Confirmed(options?: EventOptions, cb?: Callback<Confirmed>): EventEmitter;

    Revoked(cb?: Callback<Revoked>): EventEmitter;
    Revoked(options?: EventOptions, cb?: Callback<Revoked>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Confirmed", cb: Callback<Confirmed>): void;
  once(
    event: "Confirmed",
    options: EventOptions,
    cb: Callback<Confirmed>
  ): void;

  once(event: "Revoked", cb: Callback<Revoked>): void;
  once(event: "Revoked", options: EventOptions, cb: Callback<Revoked>): void;
}
