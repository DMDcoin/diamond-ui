/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../types/contracts";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface TxPermissionHbbft extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): TxPermissionHbbft;
  clone(): TxPermissionHbbft;
  methods: {
    ANNOUNCE_AVAILABILITY_SIGNATURE(): NonPayableTransactionObject<string>;

    REPORT_MALICIOUS_SIGNATURE(): NonPayableTransactionObject<string>;

    SET_VALIDATOR_IP(): NonPayableTransactionObject<string>;

    WRITE_ACKS_SIGNATURE(): NonPayableTransactionObject<string>;

    WRITE_PART_SIGNATURE(): NonPayableTransactionObject<string>;

    addAllowedSender(_sender: string): NonPayableTransactionObject<void>;

    allowedSenders(): NonPayableTransactionObject<string[]>;

    allowedTxTypes(
      _sender: string,
      _to: string,
      arg2: number | string | BN,
      _gasPrice: number | string | BN,
      _data: string | number[]
    ): NonPayableTransactionObject<{
      typesMask: string;
      cache: boolean;
      0: string;
      1: boolean;
    }>;

    blockGasLimit(): NonPayableTransactionObject<string>;

    certifierContract(): NonPayableTransactionObject<string>;

    contractName(): NonPayableTransactionObject<string>;

    contractNameHash(): NonPayableTransactionObject<string>;

    contractVersion(): NonPayableTransactionObject<string>;

    initialize(
      _allowed: string[],
      _certifier: string,
      _validatorSet: string,
      _keyGenHistoryContract: string
    ): NonPayableTransactionObject<void>;

    isInitialized(): NonPayableTransactionObject<boolean>;

    isSenderAllowed(arg0: string): NonPayableTransactionObject<boolean>;

    keyGenHistoryContract(): NonPayableTransactionObject<string>;

    minimumGasPrice(): NonPayableTransactionObject<string>;

    removeAllowedSender(_sender: string): NonPayableTransactionObject<void>;

    setBlockGasLimit(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    setMinimumGasPrice(
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    validatorSetContract(): NonPayableTransactionObject<string>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
